{"id":"../node_modules/ipfs-core/src/utils.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"is-ipfs","loc":{"line":4,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/is-ipfs/src/index.js"},{"name":"cids","loc":{"line":5,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"},{"name":"interface-datastore","loc":{"line":6,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/interface-datastore/src/index.js"},{"name":"err-code","loc":{"line":7,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"},{"name":"ipfs-core-utils/src/to-cid-and-path","loc":{"line":8,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/to-cid-and-path.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":9,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"},{"name":"merge-options","loc":{"line":11,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"}],"generated":{"js":"/* eslint-disable no-unreachable */\n'use strict'\n\nconst isIpfs = require('is-ipfs')\nconst CID = require('cids')\nconst Key = require('interface-datastore').Key\nconst errCode = require('err-code')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n/** @type {typeof Object.assign} */\nconst mergeOptions = require('merge-options')\n\nexports.mergeOptions = mergeOptions\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\n\nexports.OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\nexports.MFS_ROOT_KEY = new Key('/local/filesroot')\nexports.MFS_MAX_CHUNK_SIZE = 262144\nexports.MFS_MAX_LINKS = 174\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\nconst normalizePath = (pathStr) => {\n  if (isIpfs.cid(pathStr)) {\n    return `/ipfs/${new CID(pathStr)}`\n  } else if (isIpfs.path(pathStr)) {\n    return pathStr\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH)\n  }\n}\n\n// TODO: do we need both normalizePath and normalizeCidPath?\n/**\n * @param {Uint8Array|CID|string} path\n * @returns {string}\n */\nconst normalizeCidPath = (path) => {\n  if (path instanceof Uint8Array) {\n    return new CID(path).toString()\n  }\n  if (CID.isCID(path)) {\n    return path.toString()\n  }\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length)\n  }\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1)\n  }\n  return path\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path.\n *\n * Accepts formats:\n * - <base58 string>\n * - <base58 string>/link/to/venus\n * - /ipfs/<base58 string>/link/to/pluto\n * - multihash Buffer\n *\n * @param {import('./components').DagReader} dag\n * @param {CID | string} ipfsPath - A CID or IPFS path\n * @param {Object} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<CID>}\n */\nconst resolvePath = async function (dag, ipfsPath, options = {}) {\n  if (isIpfs.cid(ipfsPath)) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    return new CID(ipfsPath)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (!path) {\n    return cid\n  }\n\n  const result = await dag.resolve(cid, {\n    ...options,\n    path\n  })\n\n  return result.cid\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').InputFile} InputFile\n * @typedef {import('ipfs-core-types/src/files').UnixFSFile} UnixFSFile\n * @typedef {import('ipfs-core-types/src/files').IPFSEntry} IPFSEntry\n * @typedef {import('ipfs-core-types/src').AbortOptions} AbortOptions\n *\n * @param {InputFile|UnixFSFile} file\n * @param {Object} [options]\n * @param {boolean} [options.includeContent]\n * @returns {IPFSEntry}\n */\nconst mapFile = (file, options = {}) => {\n  /** @type {IPFSEntry} */\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    depth: file.path.split('/').length,\n    size: 0,\n    type: 'file'\n  }\n\n  if (file.unixfs) {\n    // @ts-ignore - TS type can't be changed from File to Directory\n    output.type = file.unixfs.type === 'directory' ? 'dir' : 'file'\n\n    if (file.unixfs.type === 'file') {\n      output.size = file.unixfs.fileSize()\n\n      if (options.includeContent) {\n        // @ts-expect-error - content is readonly\n        output.content = file.content()\n      }\n    }\n\n    output.mode = file.unixfs.mode\n    output.mtime = file.unixfs.mtime\n  }\n\n  return output\n}\n\nconst withTimeout = withTimeoutOption(\n  /**\n   * @template T\n   * @param {Promise<T>|T} promise\n   * @param {AbortOptions} [_options]\n   * @returns {Promise<T>}\n   */\n  async (promise, _options) => await promise\n)\n\nexports.normalizePath = normalizePath\nexports.normalizeCidPath = normalizeCidPath\nexports.resolvePath = resolvePath\nexports.mapFile = mapFile\nexports.withTimeoutOption = withTimeoutOption\nexports.withTimeout = withTimeout\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ipfs-core/src/utils.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"../node_modules/ipfs-core/src/utils.js":"/* eslint-disable no-unreachable */\n'use strict'\n\nconst isIpfs = require('is-ipfs')\nconst CID = require('cids')\nconst Key = require('interface-datastore').Key\nconst errCode = require('err-code')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n/** @type {typeof Object.assign} */\nconst mergeOptions = require('merge-options')\n\nexports.mergeOptions = mergeOptions\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\n\nexports.OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\nexports.MFS_ROOT_KEY = new Key('/local/filesroot')\nexports.MFS_MAX_CHUNK_SIZE = 262144\nexports.MFS_MAX_LINKS = 174\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\nconst normalizePath = (pathStr) => {\n  if (isIpfs.cid(pathStr)) {\n    return `/ipfs/${new CID(pathStr)}`\n  } else if (isIpfs.path(pathStr)) {\n    return pathStr\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH)\n  }\n}\n\n// TODO: do we need both normalizePath and normalizeCidPath?\n/**\n * @param {Uint8Array|CID|string} path\n * @returns {string}\n */\nconst normalizeCidPath = (path) => {\n  if (path instanceof Uint8Array) {\n    return new CID(path).toString()\n  }\n  if (CID.isCID(path)) {\n    return path.toString()\n  }\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length)\n  }\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1)\n  }\n  return path\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path.\n *\n * Accepts formats:\n * - <base58 string>\n * - <base58 string>/link/to/venus\n * - /ipfs/<base58 string>/link/to/pluto\n * - multihash Buffer\n *\n * @param {import('./components').DagReader} dag\n * @param {CID | string} ipfsPath - A CID or IPFS path\n * @param {Object} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<CID>}\n */\nconst resolvePath = async function (dag, ipfsPath, options = {}) {\n  if (isIpfs.cid(ipfsPath)) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    return new CID(ipfsPath)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (!path) {\n    return cid\n  }\n\n  const result = await dag.resolve(cid, {\n    ...options,\n    path\n  })\n\n  return result.cid\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').InputFile} InputFile\n * @typedef {import('ipfs-core-types/src/files').UnixFSFile} UnixFSFile\n * @typedef {import('ipfs-core-types/src/files').IPFSEntry} IPFSEntry\n * @typedef {import('ipfs-core-types/src').AbortOptions} AbortOptions\n *\n * @param {InputFile|UnixFSFile} file\n * @param {Object} [options]\n * @param {boolean} [options.includeContent]\n * @returns {IPFSEntry}\n */\nconst mapFile = (file, options = {}) => {\n  /** @type {IPFSEntry} */\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    depth: file.path.split('/').length,\n    size: 0,\n    type: 'file'\n  }\n\n  if (file.unixfs) {\n    // @ts-ignore - TS type can't be changed from File to Directory\n    output.type = file.unixfs.type === 'directory' ? 'dir' : 'file'\n\n    if (file.unixfs.type === 'file') {\n      output.size = file.unixfs.fileSize()\n\n      if (options.includeContent) {\n        // @ts-expect-error - content is readonly\n        output.content = file.content()\n      }\n    }\n\n    output.mode = file.unixfs.mode\n    output.mtime = file.unixfs.mtime\n  }\n\n  return output\n}\n\nconst withTimeout = withTimeoutOption(\n  /**\n   * @template T\n   * @param {Promise<T>|T} promise\n   * @param {AbortOptions} [_options]\n   * @returns {Promise<T>}\n   */\n  async (promise, _options) => await promise\n)\n\nexports.normalizePath = normalizePath\nexports.normalizeCidPath = normalizeCidPath\nexports.resolvePath = resolvePath\nexports.mapFile = mapFile\nexports.withTimeoutOption = withTimeoutOption\nexports.withTimeout = withTimeout\n"},"lineCount":157}},"error":null,"hash":"be06dbe2e8a377be46bf1fe1e636f26d","cacheData":{"env":{}}}