{"id":"../node_modules/ipfs-core/src/components/files/mv.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"./utils/to-sources","loc":{"line":3,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/mv.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-sources.js"},{"name":"./cp","loc":{"line":4,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/mv.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/cp.js"},{"name":"./rm","loc":{"line":5,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/mv.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/rm.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":6,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/mv.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst toSources = require('./utils/to-sources')\nconst cp = require('./cp')\nconst rm = require('./rm')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000,\n  signal: undefined\n}\n\n/**\n *\n * @param {any} context\n */\nmodule.exports = (context) => {\n  /**\n   *\n   * @param  {[...from:From, to:string, options?:MvOptions]} args\n   * @returns {Promise<void>}\n   */\n  async function mfsMv (...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions)\n\n    const cpArgs = sources\n      .map(source => source.path).concat(options)\n\n    // remove the last source as it'll be the destination\n    const rmArgs = sources\n      .slice(0, -1)\n      .map(source => source.path)\n      .concat(Object.assign(options, {\n        recursive: true\n      }))\n\n    await cp(context).apply(null, cpArgs)\n    await rm(context).apply(null, rmArgs)\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n\n/**\n * @typedef {Object} MvOptions\n * @property {boolean} [parents=false]\n * @property {boolean} [flush=false]\n * @property {string} [hashAlg='sha2-256']\n * @property {0|1} [cidVersion]\n *\n * @typedef {import('./utils/types').Tuple<string>} From\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/mv.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/files/mv.js":"'use strict'\n\nconst toSources = require('./utils/to-sources')\nconst cp = require('./cp')\nconst rm = require('./rm')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000,\n  signal: undefined\n}\n\n/**\n *\n * @param {any} context\n */\nmodule.exports = (context) => {\n  /**\n   *\n   * @param  {[...from:From, to:string, options?:MvOptions]} args\n   * @returns {Promise<void>}\n   */\n  async function mfsMv (...args) {\n    const {\n      sources,\n      options\n    } = await toSources(context, args, defaultOptions)\n\n    const cpArgs = sources\n      .map(source => source.path).concat(options)\n\n    // remove the last source as it'll be the destination\n    const rmArgs = sources\n      .slice(0, -1)\n      .map(source => source.path)\n      .concat(Object.assign(options, {\n        recursive: true\n      }))\n\n    await cp(context).apply(null, cpArgs)\n    await rm(context).apply(null, rmArgs)\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n\n/**\n * @typedef {Object} MvOptions\n * @property {boolean} [parents=false]\n * @property {boolean} [flush=false]\n * @property {string} [hashAlg='sha2-256']\n * @property {0|1} [cidVersion]\n *\n * @typedef {import('./utils/types').Tuple<string>} From\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"lineCount":63}},"error":null,"hash":"504a1d4013aaa041bc0d0773fa8310a1","cacheData":{"env":{}}}