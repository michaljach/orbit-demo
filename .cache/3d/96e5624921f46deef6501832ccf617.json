{"id":"../node_modules/mortice/lib/node.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/mortice/package.json","includedInParent":true,"mtime":1612441378821},{"name":"events","loc":{"line":1,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/events/events.js"},{"name":"shortid","loc":{"line":2,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js","resolved":"/Users/michaljach/Sites/golf/node_modules/shortid/index.js"},{"name":"./constants","loc":{"line":10,"column":12},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js","resolved":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/constants.js"},{"name":"cluster","optional":true,"loc":{"line":74,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"process","parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nconst EventEmitter = require('events').EventEmitter\nconst shortid = require('shortid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nlet cluster\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, requestEvent) => {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, () => {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        })\n\n        // wait for worker to finish\n        return new Promise((resolve) => {\n          const releaseEventListener = (releaseEvent) => {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener)\n              resolve()\n            }\n          }\n\n          worker.on('message', releaseEventListener)\n        })\n      })\n    }\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate()\n\n    process.send({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      process.on('message', listener)\n    })\n  }\n}\n\nmodule.exports = (options) => {\n  try {\n    cluster = require('cluster')\n\n    if (!Object.keys(cluster).length) {\n      return\n    }\n  } catch (_) {\n    return\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    const emitter = new EventEmitter()\n\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mortice/lib/node.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mortice/lib/node.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}}],"sources":{"../node_modules/mortice/lib/node.js":"const EventEmitter = require('events').EventEmitter\nconst shortid = require('shortid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nlet cluster\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, requestEvent) => {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, () => {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        })\n\n        // wait for worker to finish\n        return new Promise((resolve) => {\n          const releaseEventListener = (releaseEvent) => {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener)\n              resolve()\n            }\n          }\n\n          worker.on('message', releaseEventListener)\n        })\n      })\n    }\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = shortid.generate()\n\n    process.send({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      process.on('message', listener)\n    })\n  }\n}\n\nmodule.exports = (options) => {\n  try {\n    cluster = require('cluster')\n\n    if (!Object.keys(cluster).length) {\n      return\n    }\n  } catch (_) {\n    return\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    const emitter = new EventEmitter()\n\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"},"lineCount":99}},"error":null,"hash":"9a87552d9ce17fac2153696dd3f28bd1","cacheData":{"env":{}}}