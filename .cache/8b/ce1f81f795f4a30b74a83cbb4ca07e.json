{"id":"../node_modules/ipfs-core/src/components/get.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipfs-unixfs-exporter","loc":{"line":3,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/get.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-unixfs-exporter/src/index.js"},{"name":"err-code","loc":{"line":4,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/get.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"},{"name":"../utils","loc":{"line":5,"column":46},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/get.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":6,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/get.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {Object} Context\n * @property {import('.').IPLD} ipld\n * @property {import('.').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ ipld, preload }) {\n  /**\n   * Fetch a file or an entire directory tree from IPFS that is addressed by a\n   * valid IPFS Path.\n   *\n   * @param {import('ipfs-core-types/src/root').IPFSPath} ipfsPath\n   * @param {import('ipfs-core-types/src/root').GetOptions} [options]\n   * @returns {AsyncIterable<import('ipfs-core-types/src/files').IPFSEntry>}\n   */\n  async function * get (ipfsPath, options = {}) {\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(pathComponents[0])\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, ipld, options)) {\n      yield mapFile(file, {\n        ...options,\n        includeContent: true\n      })\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/get.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/get.js":"'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {Object} Context\n * @property {import('.').IPLD} ipld\n * @property {import('.').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ ipld, preload }) {\n  /**\n   * Fetch a file or an entire directory tree from IPFS that is addressed by a\n   * valid IPFS Path.\n   *\n   * @param {import('ipfs-core-types/src/root').IPFSPath} ipfsPath\n   * @param {import('ipfs-core-types/src/root').GetOptions} [options]\n   * @returns {AsyncIterable<import('ipfs-core-types/src/files').IPFSEntry>}\n   */\n  async function * get (ipfsPath, options = {}) {\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(pathComponents[0])\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, ipld, options)) {\n      yield mapFile(file, {\n        ...options,\n        includeContent: true\n      })\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"},"lineCount":47}},"error":null,"hash":"2aa64ec340149c16d91490c4c7491e17","cacheData":{"env":{}}}