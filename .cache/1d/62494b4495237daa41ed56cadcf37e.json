{"id":"../node_modules/it-parallel-batch/index.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/it-parallel-batch/package.json","includedInParent":true,"mtime":1612441379164},{"name":"it-batch","loc":{"line":3,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/it-parallel-batch/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/it-batch/index.js"}],"generated":{"js":"'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {function():Promise<T>} Task\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<Task<T>>} source\n * @param {number|string} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size) {\n  // @ts-ignore - expects string not a number\n  size = parseInt(size)\n\n  if (isNaN(size) || size < 1) {\n    size = 1\n  }\n\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<{ok:true, value:T}|{ok:false, err:Error}>[]} */\n    const things = tasks.map(p => {\n      return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n    })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/it-parallel-batch/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"../node_modules/it-parallel-batch/index.js":"'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {function():Promise<T>} Task\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<Task<T>>} source\n * @param {number|string} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size) {\n  // @ts-ignore - expects string not a number\n  size = parseInt(size)\n\n  if (isNaN(size) || size < 1) {\n    size = 1\n  }\n\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<{ok:true, value:T}|{ok:false, err:Error}>[]} */\n    const things = tasks.map(p => {\n      return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n    })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"},"lineCount":47}},"error":null,"hash":"1a2a997cc527c55498db3512396324d8","cacheData":{"env":{}}}