{"id":"../node_modules/ipfs-core/src/components/id.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"../../package.json","loc":{"line":3,"column":27},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/id.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json"},{"name":"multiaddr","loc":{"line":4,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/id.js","resolved":"/Users/michaljach/Sites/golf/node_modules/multiaddr/src/index.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":5,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/id.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"},{"name":"uint8arrays/to-string","loc":{"line":6,"column":35},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/id.js","resolved":"/Users/michaljach/Sites/golf/node_modules/uint8arrays/to-string.js"}],"generated":{"js":"'use strict'\n\nconst pkgversion = require('../../package.json').version\nconst multiaddr = require('multiaddr')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n/**\n * @param {Object} config\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ peerId, network }) => {\n  /**\n   * Returns the identity of the Peer\n   *\n   * @param {import('../utils').AbortOptions} [_options]\n   * @returns {Promise<ID>}\n   * @example\n   * ```js\n   * const identity = await ipfs.id()\n   * console.log(identity)\n   * ```\n   */\n  async function id (_options) { // eslint-disable-line require-await\n    const id = peerId.toB58String()\n    let addresses = []\n    let protocols = []\n\n    const net = network.try()\n\n    if (net) {\n      const { libp2p } = net\n      // only available while the node is running\n      addresses = libp2p.multiaddrs\n      protocols = Array.from(libp2p.upgrader.protocols.keys())\n    }\n\n    return {\n      id,\n      publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n      addresses: addresses\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${id}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${id}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000',\n      protocols: protocols.sort()\n    }\n  }\n  return withTimeoutOption(id)\n}\n\n/**\n * @typedef {object} ID\n * The Peer identity\n * @property {string} id - the Peer ID\n * @property {string} publicKey - the public key of the peer as a base64 encoded string\n * @property {import('multiaddr')[]} addresses - A list of multiaddrs this node is listening on\n * @property {string} agentVersion - The agent version\n * @property {string} protocolVersion - The supported protocol version\n * @property {string[]} protocols - The supported protocols\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/id.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/id.js":"'use strict'\n\nconst pkgversion = require('../../package.json').version\nconst multiaddr = require('multiaddr')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n/**\n * @param {Object} config\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ peerId, network }) => {\n  /**\n   * Returns the identity of the Peer\n   *\n   * @param {import('../utils').AbortOptions} [_options]\n   * @returns {Promise<ID>}\n   * @example\n   * ```js\n   * const identity = await ipfs.id()\n   * console.log(identity)\n   * ```\n   */\n  async function id (_options) { // eslint-disable-line require-await\n    const id = peerId.toB58String()\n    let addresses = []\n    let protocols = []\n\n    const net = network.try()\n\n    if (net) {\n      const { libp2p } = net\n      // only available while the node is running\n      addresses = libp2p.multiaddrs\n      protocols = Array.from(libp2p.upgrader.protocols.keys())\n    }\n\n    return {\n      id,\n      publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n      addresses: addresses\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${id}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${id}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000',\n      protocols: protocols.sort()\n    }\n  }\n  return withTimeoutOption(id)\n}\n\n/**\n * @typedef {object} ID\n * The Peer identity\n * @property {string} id - the Peer ID\n * @property {string} publicKey - the public key of the peer as a base64 encoded string\n * @property {import('multiaddr')[]} addresses - A list of multiaddrs this node is listening on\n * @property {string} agentVersion - The agent version\n * @property {string} protocolVersion - The supported protocol version\n * @property {string[]} protocols - The supported protocols\n */\n"},"lineCount":74}},"error":null,"hash":"6a041234b7e7efd2d48273ab0f08b6d9","cacheData":{"env":{}}}