{"id":"../node_modules/ipfs-core/src/components/pin/ls.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"./pin-manager","loc":{"line":4,"column":27},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/ls.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/pin-manager.js"},{"name":"ipfs-core-utils/src/pins/normalise-input","loc":{"line":6,"column":31},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/ls.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/pins/normalise-input.js"},{"name":"../../utils","loc":{"line":7,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/ls.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":8,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/ls.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict'\n\nconst PinManager = require('./pin-manager')\nconst { PinTypes } = PinManager\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nfunction toPin (type, cid, metadata) {\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {Object} config\n * @param {import('.').PinManager} config.pinManager\n * @param {import('.').DagReader} config.dagReader\n */\nmodule.exports = ({ pinManager, dagReader }) => {\n  /**\n   * List all the objects pinned to local storage\n   *\n   * @param {LsOptions} [options]\n   * @returns {AsyncIterable<LsEntry>}\n   * @example\n   * ```js\n   * for await (const { cid, type } of ipfs.pin.ls()) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   *\n   * const paths = [\n   *   CID.from('Qmc5..'),\n   *   CID.from('QmZb..'),\n   *   CID.from('QmSo..')\n   * ]\n   * for await (const { cid, type } of ipfs.pin.ls({ paths })) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   * ```\n   */\n  async function * ls (options = {}) {\n    /** @type {PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n      if (typeof options.type === 'string') {\n        // @ts-ignore - Can't infer that string returned by toLowerCase() is PinQueryType\n        type = options.type.toLowerCase()\n      }\n\n      PinManager.checkPinType(type)\n    } else {\n      options.type = PinTypes.all\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const cid = await resolvePath(dagReader, path)\n        const { reason, pinned, parent, metadata } = await pinManager.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw new Error(`path '${path}' is not pinned`)\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of pinManager.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      // @ts-ignore - LsSettings & AbortOptions have no properties in common\n      // with type { preload?: boolean }\n      for await (const cid of pinManager.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of pinManager.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n\n/**\n * @typedef {LsSettings & AbortOptions} LsOptions\n *\n * @typedef {Object} LsSettings\n * @property {string[]|CID[]} [paths] - CIDs or IPFS paths to search for in the pinset.\n * @property {PinQueryType} [type] - Filter by this type of pin (\"recursive\", \"direct\" or \"indirect\")\n *\n * @typedef {Object} LsEntry\n * @property {CID} cid -  CID of the pinned node\n * @property {PinType} type -  Pin type (\"recursive\", \"direct\" or \"indirect\")\n *\n * @typedef {import('./pin-manager').PinType} PinType\n * @typedef {import('./pin-manager').PinQueryType} PinQueryType\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').CID} CID\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/ls.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/pin/ls.js":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict'\n\nconst PinManager = require('./pin-manager')\nconst { PinTypes } = PinManager\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nfunction toPin (type, cid, metadata) {\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {Object} config\n * @param {import('.').PinManager} config.pinManager\n * @param {import('.').DagReader} config.dagReader\n */\nmodule.exports = ({ pinManager, dagReader }) => {\n  /**\n   * List all the objects pinned to local storage\n   *\n   * @param {LsOptions} [options]\n   * @returns {AsyncIterable<LsEntry>}\n   * @example\n   * ```js\n   * for await (const { cid, type } of ipfs.pin.ls()) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   *\n   * const paths = [\n   *   CID.from('Qmc5..'),\n   *   CID.from('QmZb..'),\n   *   CID.from('QmSo..')\n   * ]\n   * for await (const { cid, type } of ipfs.pin.ls({ paths })) {\n   *   console.log({ cid, type })\n   * }\n   * // { cid: CID(Qmc5XkteJdb337s7VwFBAGtiaoj2QCEzyxtNRy3iMudc3E), type: 'recursive' }\n   * // { cid: CID(QmZbj5ruYneZb8FuR9wnLqJCpCXMQudhSdWhdhp5U1oPWJ), type: 'indirect' }\n   * // { cid: CID(QmSo73bmN47gBxMNqbdV6rZ4KJiqaArqJ1nu5TvFhqqj1R), type: 'indirect' }\n   * ```\n   */\n  async function * ls (options = {}) {\n    /** @type {PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n      if (typeof options.type === 'string') {\n        // @ts-ignore - Can't infer that string returned by toLowerCase() is PinQueryType\n        type = options.type.toLowerCase()\n      }\n\n      PinManager.checkPinType(type)\n    } else {\n      options.type = PinTypes.all\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const cid = await resolvePath(dagReader, path)\n        const { reason, pinned, parent, metadata } = await pinManager.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw new Error(`path '${path}' is not pinned`)\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of pinManager.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      // @ts-ignore - LsSettings & AbortOptions have no properties in common\n      // with type { preload?: boolean }\n      for await (const cid of pinManager.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of pinManager.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n\n/**\n * @typedef {LsSettings & AbortOptions} LsOptions\n *\n * @typedef {Object} LsSettings\n * @property {string[]|CID[]} [paths] - CIDs or IPFS paths to search for in the pinset.\n * @property {PinQueryType} [type] - Filter by this type of pin (\"recursive\", \"direct\" or \"indirect\")\n *\n * @typedef {Object} LsEntry\n * @property {CID} cid -  CID of the pinned node\n * @property {PinType} type -  Pin type (\"recursive\", \"direct\" or \"indirect\")\n *\n * @typedef {import('./pin-manager').PinType} PinType\n * @typedef {import('./pin-manager').PinQueryType} PinQueryType\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').CID} CID\n */\n"},"lineCount":144}},"error":null,"hash":"11ee544d41cab40a89b3a6bf6e107014","cacheData":{"env":{}}}