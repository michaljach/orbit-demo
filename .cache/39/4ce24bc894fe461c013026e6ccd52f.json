{"id":"../node_modules/mortice/lib/index.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/mortice/package.json","includedInParent":true,"mtime":1612441378821},{"name":"./node","loc":{"line":1,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/node.js"},{"name":"./browser","loc":{"line":2,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/browser.js"},{"name":"p-queue","loc":{"line":3,"column":35},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/p-queue/dist/index.js"},{"name":"promise-timeout","loc":{"line":4,"column":28},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/promise-timeout/index.js"},{"name":"observable-webworkers","loc":{"line":5,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/mortice/lib/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/observable-webworkers/lib/index.js"}],"generated":{"js":"var global = arguments[3];\nconst node = require('./node')\nconst browser = require('./browser')\nconst { default: Queue } = require('p-queue')\nconst { timeout } = require('promise-timeout')\nconst observe = require('observable-webworkers')\n\nconst mutexes = {}\nlet implementation\n\nfunction createReleaseable (queue, options) {\n  let res\n\n  const p = new Promise((resolve) => {\n    res = resolve\n  })\n\n  queue.add(() => timeout((() => {\n    return new Promise((resolve) => {\n      res(() => {\n        resolve()\n      })\n    })\n  })(), options.timeout))\n\n  return p\n}\n\nconst createMutex = (name, options) => {\n  if (implementation.isWorker) {\n    return {\n      readLock: implementation.readLock(name, options),\n      writeLock: implementation.writeLock(name, options)\n    }\n  }\n\n  const masterQueue = new Queue({ concurrency: 1 })\n  let readQueue = null\n\n  return {\n    readLock: () => {\n      // If there's already a read queue, just add the task to it\n      if (readQueue) {\n        return createReleaseable(readQueue, options)\n      }\n\n      // Create a new read queue\n      readQueue = new Queue({\n        concurrency: options.concurrency,\n        autoStart: false\n      })\n      const localReadQueue = readQueue\n\n      // Add the task to the read queue\n      const readPromise = createReleaseable(readQueue, options)\n\n      masterQueue.add(() => {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start()\n\n        // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n        return localReadQueue.onIdle()\n          .then(() => {\n            if (readQueue === localReadQueue) {\n              readQueue = null\n            }\n          })\n      })\n\n      return readPromise\n    },\n    writeLock: () => {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null\n\n      return createReleaseable(masterQueue, options)\n    }\n  }\n}\n\nconst defaultOptions = {\n  concurrency: Infinity,\n  timeout: 84600000,\n  global: global,\n  singleProcess: false\n}\n\nmodule.exports = (name, options) => {\n  if (!options) {\n    options = {}\n  }\n\n  if (typeof name === 'object') {\n    options = name\n    name = 'lock'\n  }\n\n  if (!name) {\n    name = 'lock'\n  }\n\n  options = Object.assign({}, defaultOptions, options)\n\n  if (!implementation) {\n    implementation = node(options) || browser(options)\n\n    if (!implementation.isWorker) {\n      // we are master, set up worker requests\n      implementation.on('requestReadLock', (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].readLock()\n          .then(release => fn().finally(() => release()))\n      })\n\n      implementation.on('requestWriteLock', async (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].writeLock()\n          .then(release => fn().finally(() => release()))\n      })\n    }\n  }\n\n  if (!mutexes[name]) {\n    mutexes[name] = createMutex(name, options)\n  }\n\n  return mutexes[name]\n}\n\nmodule.exports.Worker = function (script, Impl) {\n  Impl = Impl || global.Worker\n  let worker\n\n  try {\n    worker = new Impl(script)\n  } catch (error) {\n    if (error.message.includes('not a constructor')) {\n      worker = Impl(script)\n    }\n  }\n\n  if (!worker) {\n    throw new Error('Could not create Worker from', Impl)\n  }\n\n  observe(worker)\n\n  return worker\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mortice/lib/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mortice/lib/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}}],"sources":{"../node_modules/mortice/lib/index.js":"const node = require('./node')\nconst browser = require('./browser')\nconst { default: Queue } = require('p-queue')\nconst { timeout } = require('promise-timeout')\nconst observe = require('observable-webworkers')\n\nconst mutexes = {}\nlet implementation\n\nfunction createReleaseable (queue, options) {\n  let res\n\n  const p = new Promise((resolve) => {\n    res = resolve\n  })\n\n  queue.add(() => timeout((() => {\n    return new Promise((resolve) => {\n      res(() => {\n        resolve()\n      })\n    })\n  })(), options.timeout))\n\n  return p\n}\n\nconst createMutex = (name, options) => {\n  if (implementation.isWorker) {\n    return {\n      readLock: implementation.readLock(name, options),\n      writeLock: implementation.writeLock(name, options)\n    }\n  }\n\n  const masterQueue = new Queue({ concurrency: 1 })\n  let readQueue = null\n\n  return {\n    readLock: () => {\n      // If there's already a read queue, just add the task to it\n      if (readQueue) {\n        return createReleaseable(readQueue, options)\n      }\n\n      // Create a new read queue\n      readQueue = new Queue({\n        concurrency: options.concurrency,\n        autoStart: false\n      })\n      const localReadQueue = readQueue\n\n      // Add the task to the read queue\n      const readPromise = createReleaseable(readQueue, options)\n\n      masterQueue.add(() => {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start()\n\n        // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n        return localReadQueue.onIdle()\n          .then(() => {\n            if (readQueue === localReadQueue) {\n              readQueue = null\n            }\n          })\n      })\n\n      return readPromise\n    },\n    writeLock: () => {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null\n\n      return createReleaseable(masterQueue, options)\n    }\n  }\n}\n\nconst defaultOptions = {\n  concurrency: Infinity,\n  timeout: 84600000,\n  global: global,\n  singleProcess: false\n}\n\nmodule.exports = (name, options) => {\n  if (!options) {\n    options = {}\n  }\n\n  if (typeof name === 'object') {\n    options = name\n    name = 'lock'\n  }\n\n  if (!name) {\n    name = 'lock'\n  }\n\n  options = Object.assign({}, defaultOptions, options)\n\n  if (!implementation) {\n    implementation = node(options) || browser(options)\n\n    if (!implementation.isWorker) {\n      // we are master, set up worker requests\n      implementation.on('requestReadLock', (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].readLock()\n          .then(release => fn().finally(() => release()))\n      })\n\n      implementation.on('requestWriteLock', async (name, fn) => {\n        if (!mutexes[name]) {\n          return\n        }\n\n        mutexes[name].writeLock()\n          .then(release => fn().finally(() => release()))\n      })\n    }\n  }\n\n  if (!mutexes[name]) {\n    mutexes[name] = createMutex(name, options)\n  }\n\n  return mutexes[name]\n}\n\nmodule.exports.Worker = function (script, Impl) {\n  Impl = Impl || global.Worker\n  let worker\n\n  try {\n    worker = new Impl(script)\n  } catch (error) {\n    if (error.message.includes('not a constructor')) {\n      worker = Impl(script)\n    }\n  }\n\n  if (!worker) {\n    throw new Error('Could not create Worker from', Impl)\n  }\n\n  observe(worker)\n\n  return worker\n}\n"},"lineCount":161}},"error":null,"hash":"c0c001e876894d4a1d1fcdad69d18775","cacheData":{"env":{}}}