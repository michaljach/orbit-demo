{"id":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/package.json","includedInParent":true,"mtime":1612441929414},{"name":"libp2p-crypto","loc":{"line":2,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","resolved":"/Users/michaljach/Sites/golf/node_modules/orbit-db-identity-provider/node_modules/libp2p-crypto/src/index.js"},{"name":"safe-buffer/","loc":{"line":3,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","resolved":"/Users/michaljach/Sites/golf/node_modules/safe-buffer/index.js"}],"generated":{"js":"\n'use strict'\nconst crypto = require('libp2p-crypto')\nconst Buffer = require('safe-buffer/').Buffer\n\nmodule.exports = {\n  verify: async (signature, publicKey, data) => {\n    if (!signature) {\n      throw new Error('No signature given')\n    }\n    if (!publicKey) {\n      throw new Error('Given publicKey was undefined')\n    }\n    if (!data) {\n      throw new Error('Given input data was undefined')\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data)\n    }\n\n    const isValid = (key, msg, sig) => new Promise((resolve, reject) => {\n      key.verify(msg, sig, (err, valid) => {\n        if (!err) {\n          resolve(valid)\n        }\n        reject(valid)\n      })\n    })\n\n    let res = false\n    try {\n      const pubKey = crypto.keys.supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(Buffer.from(publicKey, 'hex'))\n      res = await isValid(pubKey, data, Buffer.from(signature, 'hex'))\n    } catch (e) {\n      // Catch error: sig length wrong\n    }\n    return Promise.resolve(res)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}}],"sources":{"../node_modules/orbit-db-identity-provider/node_modules/orbit-db-keystore/src/verifiers/verifierv1.js":"'use strict'\nconst crypto = require('libp2p-crypto')\nconst Buffer = require('safe-buffer/').Buffer\n\nmodule.exports = {\n  verify: async (signature, publicKey, data) => {\n    if (!signature) {\n      throw new Error('No signature given')\n    }\n    if (!publicKey) {\n      throw new Error('Given publicKey was undefined')\n    }\n    if (!data) {\n      throw new Error('Given input data was undefined')\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data)\n    }\n\n    const isValid = (key, msg, sig) => new Promise((resolve, reject) => {\n      key.verify(msg, sig, (err, valid) => {\n        if (!err) {\n          resolve(valid)\n        }\n        reject(valid)\n      })\n    })\n\n    let res = false\n    try {\n      const pubKey = crypto.keys.supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(Buffer.from(publicKey, 'hex'))\n      res = await isValid(pubKey, data, Buffer.from(signature, 'hex'))\n    } catch (e) {\n      // Catch error: sig length wrong\n    }\n    return Promise.resolve(res)\n  }\n}\n"},"lineCount":41}},"error":null,"hash":"c5cce83a28853243a6bc691165aaa5b2","cacheData":{"env":{}}}