{"id":"../node_modules/ipfs-core/src/runtime/ipld.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"merge-options","loc":{"line":3,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/ipld.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"},{"name":"multicodec","loc":{"line":4,"column":27},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/ipld.js","resolved":"/Users/michaljach/Sites/golf/node_modules/multicodec/src/index.js"},{"name":"ipld-dag-pb","loc":{"line":9,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/ipld.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipld-dag-pb/src/index.js"},{"name":"ipld-dag-cbor","loc":{"line":12,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/ipld.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipld-dag-cbor/src/index.js"},{"name":"ipld-raw","loc":{"line":15,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/ipld.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipld-raw/src/index.js"}],"generated":{"js":"'use strict'\n\nconst mergeOptions = require('merge-options')\nconst multicodec = require('multicodec')\n\n// All known (non-default) IPLD formats\nconst IpldFormats = {\n  get [multicodec.DAG_PB] () {\n    return require('ipld-dag-pb')\n  },\n  get [multicodec.DAG_CBOR] () {\n    return require('ipld-dag-cbor')\n  },\n  get [multicodec.RAW] () {\n    return require('ipld-raw')\n  }\n}\n\nmodule.exports = (blockService, options = {}, log) => {\n  return mergeOptions.call(\n    // ensure we have the defaults formats even if the user overrides `formats: []`\n    { concatArrays: true },\n    {\n      blockService: blockService,\n      loadFormat: (codec) => {\n        log('Loading IPLD format', codec)\n        if (IpldFormats[codec]) {\n          return IpldFormats[codec]\n        } else {\n          throw new Error(`Missing IPLD format \"${multicodec.getName(codec)}\"`)\n        }\n      }\n    }, options)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/ipld.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"../node_modules/ipfs-core/src/runtime/ipld.js":"'use strict'\n\nconst mergeOptions = require('merge-options')\nconst multicodec = require('multicodec')\n\n// All known (non-default) IPLD formats\nconst IpldFormats = {\n  get [multicodec.DAG_PB] () {\n    return require('ipld-dag-pb')\n  },\n  get [multicodec.DAG_CBOR] () {\n    return require('ipld-dag-cbor')\n  },\n  get [multicodec.RAW] () {\n    return require('ipld-raw')\n  }\n}\n\nmodule.exports = (blockService, options = {}, log) => {\n  return mergeOptions.call(\n    // ensure we have the defaults formats even if the user overrides `formats: []`\n    { concatArrays: true },\n    {\n      blockService: blockService,\n      loadFormat: (codec) => {\n        log('Loading IPLD format', codec)\n        if (IpldFormats[codec]) {\n          return IpldFormats[codec]\n        } else {\n          throw new Error(`Missing IPLD format \"${multicodec.getName(codec)}\"`)\n        }\n      }\n    }, options)\n}\n"},"lineCount":35}},"error":null,"hash":"b553cbfe950122adc3d61db7414baeb7","cacheData":{"env":{}}}