{"id":"../node_modules/ipfs-core/src/mfs-preload.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"debug","loc":{"line":3,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/mfs-preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/debug/src/browser.js"},{"name":"ipfs-core-utils/src/cid","loc":{"line":4,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/mfs-preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/cid.js"}],"generated":{"js":"'use strict'\n\nconst debug = require('debug')\nconst { cidToString } = require('ipfs-core-utils/src/cid')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @param {Object} config\n * @param {import('./components').Preload} config.preload\n * @param {import('./components').Files} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid, timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = cidToString(stats.cid, { base: 'base32' })\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = cidToString(stats.cid, { base: 'base32' })\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n\n/**\n * @typedef {ReturnType<typeof module.exports>} MFSPreload\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./components').PreloadOptions} PreloadOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/mfs-preload.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}}],"sources":{"../node_modules/ipfs-core/src/mfs-preload.js":"'use strict'\n\nconst debug = require('debug')\nconst { cidToString } = require('ipfs-core-utils/src/cid')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @param {Object} config\n * @param {import('./components').Preload} config.preload\n * @param {import('./components').Files} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid, timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = cidToString(stats.cid, { base: 'base32' })\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = cidToString(stats.cid, { base: 'base32' })\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n\n/**\n * @typedef {ReturnType<typeof module.exports>} MFSPreload\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./components').PreloadOptions} PreloadOptions\n */\n"},"lineCount":69}},"error":null,"hash":"88fb39ba998642042ea71b3b53b8e91b","cacheData":{"env":{}}}