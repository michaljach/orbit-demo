{"id":"../node_modules/ipfs-core/src/components/swarm/peers.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":3,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/swarm/peers.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * Local addresses this node is listening on.\n   *\n   * @param {PeersOptions & AbortOptions} [options]\n   * @returns {Promise<PeerConnection[]>}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n    const verbose = options.v || options.verbose\n    const peers = []\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        const tupple = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        }\n\n        if (verbose || options.direction) {\n          tupple.direction = connection.stat.direction\n        }\n\n        if (verbose) {\n          tupple.muxer = connection.stat.multiplexer\n          tupple.latency = 'n/a'\n        }\n\n        peers.push(tupple)\n      }\n    }\n\n    return peers\n  }\n\n  return withTimeoutOption(peers)\n}\n\n/**\n * @typedef {Object} PeerConnection\n * @property {Multiaddr} addr\n * @property {string} peer\n * @property {string} [latency]\n * @property {string} [muxer]\n * @property {number} [direction]\n *\n * @typedef {Object} PeersOptions\n * @property {boolean} [direction=false]\n * @property {boolean} [streams=false]\n * @property {boolean} [verbose=false]\n * @property {boolean} [v=false]\n * @property {boolean} [latency=false]\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n * @typedef {import('.').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/peers.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/swarm/peers.js":"'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * Local addresses this node is listening on.\n   *\n   * @param {PeersOptions & AbortOptions} [options]\n   * @returns {Promise<PeerConnection[]>}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n    const verbose = options.v || options.verbose\n    const peers = []\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        const tupple = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        }\n\n        if (verbose || options.direction) {\n          tupple.direction = connection.stat.direction\n        }\n\n        if (verbose) {\n          tupple.muxer = connection.stat.multiplexer\n          tupple.latency = 'n/a'\n        }\n\n        peers.push(tupple)\n      }\n    }\n\n    return peers\n  }\n\n  return withTimeoutOption(peers)\n}\n\n/**\n * @typedef {Object} PeerConnection\n * @property {Multiaddr} addr\n * @property {string} peer\n * @property {string} [latency]\n * @property {string} [muxer]\n * @property {number} [direction]\n *\n * @typedef {Object} PeersOptions\n * @property {boolean} [direction=false]\n * @property {boolean} [streams=false]\n * @property {boolean} [verbose=false]\n * @property {boolean} [v=false]\n * @property {boolean} [latency=false]\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n * @typedef {import('.').AbortOptions} AbortOptions\n */\n"},"lineCount":65}},"error":null,"hash":"4b58e9ec5d9da3b4864e1750c8d6a07b","cacheData":{"env":{}}}