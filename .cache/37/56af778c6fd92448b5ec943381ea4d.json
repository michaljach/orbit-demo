{"id":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/package.json","includedInParent":true,"mtime":1612441996361},{"name":"path","loc":{"line":3,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/path-browserify/index.js"},{"name":"events","loc":{"line":4,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/events/events.js"},{"name":"./protocol","loc":{"line":5,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/protocol.js"},{"name":"./encoding","loc":{"line":6,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/encoding.js"},{"name":"./wait-for-peers","loc":{"line":7,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/wait-for-peers.js"},{"name":"./get-peer-id","loc":{"line":8,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-1on1/src/get-peer-id.js"}],"generated":{"js":"'use strict'\n\nconst path = require('path')\nconst EventEmitter = require('events')\nconst PROTOCOL = require('./protocol')\nconst encode = require('./encoding')\nconst waitForPeers = require('./wait-for-peers')\nconst getPeerID = require('./get-peer-id')\n\n/**\n * Communication channel over Pubsub between two IPFS nodes\n */\nclass DirectChannel extends EventEmitter {\n  constructor (ipfs, receiverID) {\n    super()\n\n    // IPFS instance to use internally\n    this._ipfs = ipfs\n\n    if (!ipfs.pubsub) {\n      throw new Error('This IPFS node does not support pubsub.')\n    }\n\n    this._receiverID = receiverID\n\n    if (!this._receiverID) {\n      throw new Error('Receiver ID was undefined')\n    }\n    // See _setup() for more state initialization\n  }\n\n  /**\n   * Channel ID\n   * @return {[String]} Channel's ID\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Peers participating in this channel\n   * @return {[Array]} Array of peer IDs participating in this channel\n   */\n  get peers () {\n    return this._peers\n  }\n\n  async connect () {\n    await waitForPeers(this._ipfs, [this._receiverID], this._id)\n  }\n\n  /**\n   * Send a message to the other peer\n   * @param  {[Any]} message Payload\n   */\n  async send (message) {\n    let m = encode(message)\n    await this._ipfs.pubsub.publish(this._id, m)\n  }\n\n  /**\n   * Close the channel\n   */\n  close () {\n    this.removeAllListeners('message')\n    this._ipfs.pubsub.unsubscribe(this._id, this._messageHandler)\n  }\n\n  async _setup () {\n    this._senderID = await getPeerID(this._ipfs)\n\n    // Channel's participants\n    this._peers = Array.from([this._senderID, this._receiverID]).sort()\n\n    // ID of the channel is \"<peer1 id>/<peer 2 id>\"\"\n    this._id = '/' + PROTOCOL + '/' + this._peers.join('/')\n\n    // Function to use to handle incoming messages\n    this._messageHandler = message => {\n      // Make sure the message is coming from the correct peer\n      const isValid = message && message.from === this._receiverID\n      // Filter out all messages that didn't come from the second peer\n      if (isValid) {\n        this.emit('message', message)\n      }\n    }\n  }\n\n  async _openChannel () {\n    await this._setup()\n    await this._ipfs.pubsub.subscribe(this._id, this._messageHandler)\n  }\n\n  static async open (ipfs, receiverID) {\n    const channel = new DirectChannel(ipfs, receiverID)\n    await channel._openChannel()\n    return channel\n  }\n}\n\nmodule.exports = DirectChannel\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}}],"sources":{"../node_modules/ipfs-pubsub-1on1/src/direct-channel.js":"'use strict'\n\nconst path = require('path')\nconst EventEmitter = require('events')\nconst PROTOCOL = require('./protocol')\nconst encode = require('./encoding')\nconst waitForPeers = require('./wait-for-peers')\nconst getPeerID = require('./get-peer-id')\n\n/**\n * Communication channel over Pubsub between two IPFS nodes\n */\nclass DirectChannel extends EventEmitter {\n  constructor (ipfs, receiverID) {\n    super()\n\n    // IPFS instance to use internally\n    this._ipfs = ipfs\n\n    if (!ipfs.pubsub) {\n      throw new Error('This IPFS node does not support pubsub.')\n    }\n\n    this._receiverID = receiverID\n\n    if (!this._receiverID) {\n      throw new Error('Receiver ID was undefined')\n    }\n    // See _setup() for more state initialization\n  }\n\n  /**\n   * Channel ID\n   * @return {[String]} Channel's ID\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Peers participating in this channel\n   * @return {[Array]} Array of peer IDs participating in this channel\n   */\n  get peers () {\n    return this._peers\n  }\n\n  async connect () {\n    await waitForPeers(this._ipfs, [this._receiverID], this._id)\n  }\n\n  /**\n   * Send a message to the other peer\n   * @param  {[Any]} message Payload\n   */\n  async send (message) {\n    let m = encode(message)\n    await this._ipfs.pubsub.publish(this._id, m)\n  }\n\n  /**\n   * Close the channel\n   */\n  close () {\n    this.removeAllListeners('message')\n    this._ipfs.pubsub.unsubscribe(this._id, this._messageHandler)\n  }\n\n  async _setup () {\n    this._senderID = await getPeerID(this._ipfs)\n\n    // Channel's participants\n    this._peers = Array.from([this._senderID, this._receiverID]).sort()\n\n    // ID of the channel is \"<peer1 id>/<peer 2 id>\"\"\n    this._id = '/' + PROTOCOL + '/' + this._peers.join('/')\n\n    // Function to use to handle incoming messages\n    this._messageHandler = message => {\n      // Make sure the message is coming from the correct peer\n      const isValid = message && message.from === this._receiverID\n      // Filter out all messages that didn't come from the second peer\n      if (isValid) {\n        this.emit('message', message)\n      }\n    }\n  }\n\n  async _openChannel () {\n    await this._setup()\n    await this._ipfs.pubsub.subscribe(this._id, this._messageHandler)\n  }\n\n  static async open (ipfs, receiverID) {\n    const channel = new DirectChannel(ipfs, receiverID)\n    await channel._openChannel()\n    return channel\n  }\n}\n\nmodule.exports = DirectChannel\n"},"lineCount":102}},"error":null,"hash":"e0ea5b8ce4d669dfc6848735f01ef0d7","cacheData":{"env":{}}}