{"id":"../node_modules/ipfs-core/src/components/swarm/addrs.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":3,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/swarm/addrs.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * List of known addresses of each peer connected.\n   *\n   * @param {import('../../utils').AbortOptions} options\n   * @returns {Promise<PeerInfo[]>}\n   */\n  async function addrs (options) { // eslint-disable-line require-await\n    const peers = []\n    const { libp2p } = await network.use(options)\n    for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n      peers.push({\n        id: peerId,\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    }\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n\n/**\n * @typedef {Object} PeerInfo\n * @property {string} id\n * @property {Multiaddr[]} addrs\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/swarm/addrs.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/swarm/addrs.js":"'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * List of known addresses of each peer connected.\n   *\n   * @param {import('../../utils').AbortOptions} options\n   * @returns {Promise<PeerInfo[]>}\n   */\n  async function addrs (options) { // eslint-disable-line require-await\n    const peers = []\n    const { libp2p } = await network.use(options)\n    for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n      peers.push({\n        id: peerId,\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    }\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n\n/**\n * @typedef {Object} PeerInfo\n * @property {string} id\n * @property {Multiaddr[]} addrs\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n */\n"},"lineCount":38}},"error":null,"hash":"8dcb904583d4ff081ee3564713881584","cacheData":{"env":{}}}