{"id":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/libp2p/package.json","includedInParent":true,"mtime":1612441378238},{"name":"protons","loc":{"line":3,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/libp2p/src/record/peer-record/peer-record.proto.js","resolved":"/Users/michaljach/Sites/golf/node_modules/protons/src/index.js"}],"generated":{"js":"'use strict';\n\nconst protons = require('protons'); // PeerRecord messages contain information that is useful to share with other peers.\n// Currently, a PeerRecord contains the public listen addresses for a peer, but this\n// is expected to expand to include other information in the future.\n// PeerRecords are designed to be serialized to bytes and placed inside of\n// SignedEnvelopes before sharing with other peers.\n\n/** @type {{PeerRecord: import('../../types').MessageProto}} */\n\n\nmodule.exports = protons(`\nmessage PeerRecord {\n    // AddressInfo is a wrapper around a binary multiaddr. It is defined as a\n    // separate message to allow us to add per-address metadata in the future.\n    message AddressInfo {\n        bytes multiaddr = 1;\n    }\n\n    // peer_id contains a libp2p peer id in its binary representation.\n    bytes peer_id = 1;\n\n    // seq contains a monotonically-increasing sequence counter to order PeerRecords in time.\n    uint64 seq = 2;\n\n    // addresses is a list of public listen addresses for the peer.\n    repeated AddressInfo addresses = 3;\n}\n`);"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":0}},{"name":"protons","generated":{"line":3,"column":6},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":13},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":13}},{"name":"require","generated":{"line":3,"column":16},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":16}},{"generated":{"line":3,"column":23},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":24},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":24}},{"generated":{"line":3,"column":33},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":34},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":36},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":5,"column":0}},{"generated":{"line":4,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":6,"column":0}},{"generated":{"line":5,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":7,"column":0}},{"generated":{"line":6,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":8,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":10,"column":0}},{"name":"module","generated":{"line":12,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":6},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":6}},{"name":"exports","generated":{"line":12,"column":7},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":7}},{"generated":{"line":12,"column":14},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":0}},{"name":"protons","generated":{"line":12,"column":17},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":17}},{"generated":{"line":12,"column":24},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":24}},{"generated":{"line":12,"column":25},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":26}},{"generated":{"line":13,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":12,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":13,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":15,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":16,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":17,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":18,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":19,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":20,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":21,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":22,"column":0}},{"generated":{"line":24,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":23,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":24,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":25,"column":0}},{"generated":{"line":27,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":26,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":27,"column":0}},{"generated":{"line":29,"column":0},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":28,"column":0}},{"generated":{"line":29,"column":1},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":24}},{"generated":{"line":29,"column":2},"source":"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js","original":{"line":11,"column":0}}],"sources":{"../node_modules/libp2p/src/record/peer-record/peer-record.proto.js":"'use strict'\n\nconst protons = require('protons')\n\n// PeerRecord messages contain information that is useful to share with other peers.\n// Currently, a PeerRecord contains the public listen addresses for a peer, but this\n// is expected to expand to include other information in the future.\n// PeerRecords are designed to be serialized to bytes and placed inside of\n// SignedEnvelopes before sharing with other peers.\n/** @type {{PeerRecord: import('../../types').MessageProto}} */\nmodule.exports = protons(`\nmessage PeerRecord {\n    // AddressInfo is a wrapper around a binary multiaddr. It is defined as a\n    // separate message to allow us to add per-address metadata in the future.\n    message AddressInfo {\n        bytes multiaddr = 1;\n    }\n\n    // peer_id contains a libp2p peer id in its binary representation.\n    bytes peer_id = 1;\n\n    // seq contains a monotonically-increasing sequence counter to order PeerRecords in time.\n    uint64 seq = 2;\n\n    // addresses is a list of public listen addresses for the peer.\n    repeated AddressInfo addresses = 3;\n}\n`)\n"},"lineCount":null}},"error":null,"hash":"5058c8974fe3129a062fc3bfab8a0e0a","cacheData":{"env":{}}}