{"id":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/libp2p-interfaces/package.json","includedInParent":true,"mtime":1612441378234}],"generated":{"js":"'use strict'\n\n/**\n * Enum for Signature Policy\n * Details how message signatures are produced/consumed\n */\nconst SignaturePolicy = {\n  /**\n   * On the producing side:\n   * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n   *\n   * On the consuming side:\n   * * Enforce the fields to be present, reject otherwise.\n   * * Propagate only if the fields are valid and signature can be verified, reject otherwise.\n   */\n  StrictSign: /** @type {'StrictSign'} */ ('StrictSign'),\n  /**\n   * On the producing side:\n   * * Build messages without the signature, key, from and seqno fields.\n   * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n   *\n   * On the consuming side:\n   * * Enforce the fields to be absent, reject otherwise.\n   * * Propagate only if the fields are absent, reject otherwise.\n   * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n   */\n  StrictNoSign: /** @type {'StrictNoSign'} */ ('StrictNoSign')\n}\nexports.SignaturePolicy = SignaturePolicy\n\n/**\n * @typedef {SignaturePolicy[keyof SignaturePolicy]} SignaturePolicyType\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"../node_modules/libp2p-interfaces/src/pubsub/signature-policy.js":"'use strict'\n\n/**\n * Enum for Signature Policy\n * Details how message signatures are produced/consumed\n */\nconst SignaturePolicy = {\n  /**\n   * On the producing side:\n   * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n   *\n   * On the consuming side:\n   * * Enforce the fields to be present, reject otherwise.\n   * * Propagate only if the fields are valid and signature can be verified, reject otherwise.\n   */\n  StrictSign: /** @type {'StrictSign'} */ ('StrictSign'),\n  /**\n   * On the producing side:\n   * * Build messages without the signature, key, from and seqno fields.\n   * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n   *\n   * On the consuming side:\n   * * Enforce the fields to be absent, reject otherwise.\n   * * Propagate only if the fields are absent, reject otherwise.\n   * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n   */\n  StrictNoSign: /** @type {'StrictNoSign'} */ ('StrictNoSign')\n}\nexports.SignaturePolicy = SignaturePolicy\n\n/**\n * @typedef {SignaturePolicy[keyof SignaturePolicy]} SignaturePolicyType\n */\n"},"lineCount":34}},"error":null,"hash":"0433e9b7e5fb0a2aabff2b3daf37f81d","cacheData":{"env":{}}}