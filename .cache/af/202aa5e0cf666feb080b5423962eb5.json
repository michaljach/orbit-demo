{"id":"../node_modules/ipfs-core/src/components/name/resolve.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"debug","loc":{"line":3,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/debug/src/browser.js"},{"name":"err-code","loc":{"line":4,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"},{"name":"../../utils","loc":{"line":13,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js"},{"name":"cids","loc":{"line":6,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"},{"name":"is-domain-name","loc":{"line":7,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/is-domain-name/index.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":14,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/resolve.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst { mergeOptions } = require('../../utils')\nconst CID = require('cids')\nconst isDomain = require('is-domain-name')\n\nconst log = Object.assign(debug('ipfs:name:resolve'), {\n  error: debug('ipfs:name:resolve:error')\n})\n\nconst { OFFLINE_ERROR } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n *\n * @param {string} result\n * @param {string[]} remainder\n * @returns {string}\n */\nconst appendRemainder = (result, remainder) =>\n  remainder.length > 0\n    ? result + '/' + remainder.join('/')\n    : result\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {Object} config\n * @param {import('.').DNS} config.dns\n * @param {import('.').IPNS} config.ipns\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').IsOnline} config.isOnline\n * @param {ResolveOptions} config.options\n */\nmodule.exports = ({ dns, ipns, peerId, isOnline, options: { offline } }) => {\n  /**\n   * Given a key, query the DHT for its best value.\n   *\n   * @param {string} name - ipns name to resolve. Defaults to your node's peerID.\n   * @param {Options & AbortOptions} [options]\n   * @returns {AsyncIterable<string>}\n   * @example\n   * ```js\n   * // The IPNS address you want to resolve.\n   * const addr = '/ipns/ipfs.io'\n   *\n   * for await (const name of ipfs.name.resolve(addr)) {\n   *   console.log(name)\n   * }\n   * // Logs: /ipfs/QmQrX8hka2BtNHa8N8arAq16TCVx5qHcb46c5yPewRycLm\n   * ```\n   */\n  async function * resolve (name, options = {}) { // eslint-disable-line require-await\n    options = mergeOptions({\n      nocache: false,\n      recursive: true\n    }, options)\n\n    // TODO: params related logic should be in the core implementation\n    if (offline && options && options.nocache) {\n      throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE')\n    }\n\n    // Set node id as name for being resolved, if it is not received\n    if (!name) {\n      name = peerId.toB58String()\n    }\n\n    if (!name.startsWith('/ipns/')) {\n      name = `/ipns/${name}`\n    }\n\n    const [namespace, hash, ...remainder] = name.slice(1).split('/')\n    try {\n      new CID(hash) // eslint-disable-line no-new\n    } catch (err) {\n      // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns\n      if (isDomain(hash)) {\n        yield appendRemainder(await dns(hash, options), remainder)\n        return\n      }\n\n      log.error(err)\n      throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME')\n    }\n\n    // multihash is valid lets resolve with IPNS\n    // IPNS resolve needs a online daemon\n    if (!isOnline() && !offline) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: convert ipns.resolve to return an iterator\n    yield appendRemainder(await ipns.resolve(`/${namespace}/${hash}`, options), remainder)\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * IPFS resolve options.\n *\n * @typedef {Object} Options\n * @property {boolean} [options.nocache=false] - do not use cached entries.\n * @property {boolean} [options.recursive=true] - resolve until the result is not an IPNS name.\n *\n * @typedef {Object} ResolveOptions\n * @property {boolean} [offline]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/resolve.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/name/resolve.js":"'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst { mergeOptions } = require('../../utils')\nconst CID = require('cids')\nconst isDomain = require('is-domain-name')\n\nconst log = Object.assign(debug('ipfs:name:resolve'), {\n  error: debug('ipfs:name:resolve:error')\n})\n\nconst { OFFLINE_ERROR } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n *\n * @param {string} result\n * @param {string[]} remainder\n * @returns {string}\n */\nconst appendRemainder = (result, remainder) =>\n  remainder.length > 0\n    ? result + '/' + remainder.join('/')\n    : result\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {Object} config\n * @param {import('.').DNS} config.dns\n * @param {import('.').IPNS} config.ipns\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').IsOnline} config.isOnline\n * @param {ResolveOptions} config.options\n */\nmodule.exports = ({ dns, ipns, peerId, isOnline, options: { offline } }) => {\n  /**\n   * Given a key, query the DHT for its best value.\n   *\n   * @param {string} name - ipns name to resolve. Defaults to your node's peerID.\n   * @param {Options & AbortOptions} [options]\n   * @returns {AsyncIterable<string>}\n   * @example\n   * ```js\n   * // The IPNS address you want to resolve.\n   * const addr = '/ipns/ipfs.io'\n   *\n   * for await (const name of ipfs.name.resolve(addr)) {\n   *   console.log(name)\n   * }\n   * // Logs: /ipfs/QmQrX8hka2BtNHa8N8arAq16TCVx5qHcb46c5yPewRycLm\n   * ```\n   */\n  async function * resolve (name, options = {}) { // eslint-disable-line require-await\n    options = mergeOptions({\n      nocache: false,\n      recursive: true\n    }, options)\n\n    // TODO: params related logic should be in the core implementation\n    if (offline && options && options.nocache) {\n      throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE')\n    }\n\n    // Set node id as name for being resolved, if it is not received\n    if (!name) {\n      name = peerId.toB58String()\n    }\n\n    if (!name.startsWith('/ipns/')) {\n      name = `/ipns/${name}`\n    }\n\n    const [namespace, hash, ...remainder] = name.slice(1).split('/')\n    try {\n      new CID(hash) // eslint-disable-line no-new\n    } catch (err) {\n      // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns\n      if (isDomain(hash)) {\n        yield appendRemainder(await dns(hash, options), remainder)\n        return\n      }\n\n      log.error(err)\n      throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME')\n    }\n\n    // multihash is valid lets resolve with IPNS\n    // IPNS resolve needs a online daemon\n    if (!isOnline() && !offline) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: convert ipns.resolve to return an iterator\n    yield appendRemainder(await ipns.resolve(`/${namespace}/${hash}`, options), remainder)\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * IPFS resolve options.\n *\n * @typedef {Object} Options\n * @property {boolean} [options.nocache=false] - do not use cached entries.\n * @property {boolean} [options.recursive=true] - resolve until the result is not an IPNS name.\n *\n * @typedef {Object} ResolveOptions\n * @property {boolean} [offline]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */\n"},"lineCount":114}},"error":null,"hash":"77165fbe3dad43c36d0187e1e8a11e0d","cacheData":{"env":{}}}