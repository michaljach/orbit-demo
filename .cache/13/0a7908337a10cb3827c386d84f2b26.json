{"id":"../node_modules/ipfs-core/src/components/name/utils.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"is-ipfs","loc":{"line":3,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/name/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/is-ipfs/src/index.js"}],"generated":{"js":"'use strict'\n\nconst isIPFS = require('is-ipfs')\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {IPNS} context.ipns\n * @param {DagReader} context.dagReader\n * @param {string} name\n */\nexports.resolvePath = ({ ipns, dagReader }, name) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  // ipfs path\n  return dagReader.get(name.substring('/ipfs/'.length))\n}\n\n/**\n * @typedef {import('.').DagReader} DagReader\n * @typedef {import('.').IPNS} IPNS\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/name/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/name/utils.js":"'use strict'\n\nconst isIPFS = require('is-ipfs')\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {IPNS} context.ipns\n * @param {DagReader} context.dagReader\n * @param {string} name\n */\nexports.resolvePath = ({ ipns, dagReader }, name) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  // ipfs path\n  return dagReader.get(name.substring('/ipfs/'.length))\n}\n\n/**\n * @typedef {import('.').DagReader} DagReader\n * @typedef {import('.').IPNS} IPNS\n */\n"},"lineCount":28}},"error":null,"hash":"69840f699cc2ef868352eaad4e73cdd2","cacheData":{"env":{}}}