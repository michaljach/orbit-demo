{"id":"../node_modules/ipfs-core/src/preload.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"multiaddr-to-uri","loc":{"line":3,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/multiaddr-to-uri/index.js"},{"name":"debug","loc":{"line":4,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/debug/src/browser.js"},{"name":"cids","loc":{"line":5,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"},{"name":"array-shuffle","loc":{"line":6,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/array-shuffle/index.js"},{"name":"native-abort-controller","loc":{"line":7,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/native-abort-controller/src/index.js"},{"name":"./runtime/preload-nodejs","loc":{"line":8,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/preload-browser.js"},{"name":"hashlru","loc":{"line":11,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/preload.js","resolved":"/Users/michaljach/Sites/golf/node_modules/hashlru/index.js"}],"generated":{"js":"'use strict'\n\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst CID = require('cids')\nconst shuffle = require('array-shuffle')\nconst AbortController = require('native-abort-controller')\nconst preload = require('./runtime/preload-nodejs')\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\nconst hashlru = require('hashlru')\n\nconst log = Object.assign(\n  debug('ipfs:preload'),\n  { error: debug('ipfs:preload:error') }\n)\n\n/**\n * @param {Options & AbortOptions} [options]\n */\nconst createPreloader = (options = {}) => {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  let requests = []\n  const apiUris = options.addresses.map(toUri)\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @param {string|CID} path\n   * @returns {Promise<void>}\n   */\n  const api = async path => {\n    try {\n      if (stopped) throw new Error(`preload ${path} but preloader is not started`)\n\n      if (typeof path !== 'string') {\n        path = new CID(path).toString()\n      }\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n\nmodule.exports = createPreloader\n\n/**\n * @typedef {ReturnType<typeof createPreloader>} Preload\n *\n * @typedef {object} Options\n * @property {boolean} [enabled = false] - Whether to preload anything\n * @property {number} [cache = 1000] - How many CIDs to cache\n * @property {string[]} [addresses = []] - Which preload servers to use.\n * **NOTE:** nodes specified here should also be added to your node's bootstrap address list at `config.Boostrap`.\n *\n * @typedef {import('./components').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/src/preload.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}}],"sources":{"../node_modules/ipfs-core/src/preload.js":"'use strict'\n\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst CID = require('cids')\nconst shuffle = require('array-shuffle')\nconst AbortController = require('native-abort-controller')\nconst preload = require('./runtime/preload-nodejs')\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\nconst hashlru = require('hashlru')\n\nconst log = Object.assign(\n  debug('ipfs:preload'),\n  { error: debug('ipfs:preload:error') }\n)\n\n/**\n * @param {Options & AbortOptions} [options]\n */\nconst createPreloader = (options = {}) => {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  let requests = []\n  const apiUris = options.addresses.map(toUri)\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @param {string|CID} path\n   * @returns {Promise<void>}\n   */\n  const api = async path => {\n    try {\n      if (stopped) throw new Error(`preload ${path} but preloader is not started`)\n\n      if (typeof path !== 'string') {\n        path = new CID(path).toString()\n      }\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n\nmodule.exports = createPreloader\n\n/**\n * @typedef {ReturnType<typeof createPreloader>} Preload\n *\n * @typedef {object} Options\n * @property {boolean} [enabled = false] - Whether to preload anything\n * @property {number} [cache = 1000] - How many CIDs to cache\n * @property {string[]} [addresses = []] - Which preload servers to use.\n * **NOTE:** nodes specified here should also be added to your node's bootstrap address list at `config.Boostrap`.\n *\n * @typedef {import('./components').AbortOptions} AbortOptions\n */\n"},"lineCount":123}},"error":null,"hash":"9c85b8c94c1fe880ff1cacb720cb37f1","cacheData":{"env":{}}}