{"id":"../node_modules/ipfs-core/src/components/pin/rm-all.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipfs-core-utils/src/pins/normalise-input","loc":{"line":3,"column":31},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/rm-all.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/pins/normalise-input.js"},{"name":"../../utils","loc":{"line":4,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/rm-all.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":5,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/rm-all.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"},{"name":"./pin-manager","loc":{"line":6,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/rm-all.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/pin/pin-manager.js"}],"generated":{"js":"'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { PinTypes } = require('./pin-manager')\n\n/**\n * @param {Object} config\n * @param {import('.').PinManager} config.pinManager\n * @param {import('.').GCLock} config.gcLock\n * @param {import('.').DagReader} config.dagReader\n */\nmodule.exports = ({ pinManager, gcLock, dagReader }) => {\n  /**\n   * Unpin one or more blocks from your repo\n   *\n   * @param {Source} source - Unpin all pins from the source\n   * @param {AbortOptions} [_options]\n   * @returns {AsyncIterable<CID>}\n   * @example\n   * ```js\n   * const source = [\n   *   CID.from('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ]\n   * for await (const cid of ipfs.pin.rmAll(source)) {\n   *   console.log(cid)\n   * }\n   * // prints the CIDs that were unpinned\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const cid = await resolvePath(dagReader, path)\n        const { pinned, reason } = await pinManager.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n\n/**\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('./add-all').Source} Source\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/components/pin/rm-all.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/pin/rm-all.js":"'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { PinTypes } = require('./pin-manager')\n\n/**\n * @param {Object} config\n * @param {import('.').PinManager} config.pinManager\n * @param {import('.').GCLock} config.gcLock\n * @param {import('.').DagReader} config.dagReader\n */\nmodule.exports = ({ pinManager, gcLock, dagReader }) => {\n  /**\n   * Unpin one or more blocks from your repo\n   *\n   * @param {Source} source - Unpin all pins from the source\n   * @param {AbortOptions} [_options]\n   * @returns {AsyncIterable<CID>}\n   * @example\n   * ```js\n   * const source = [\n   *   CID.from('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ]\n   * for await (const cid of ipfs.pin.rmAll(source)) {\n   *   console.log(cid)\n   * }\n   * // prints the CIDs that were unpinned\n   * // CID('QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u')\n   * ```\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const cid = await resolvePath(dagReader, path)\n        const { pinned, reason } = await pinManager.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await pinManager.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n\n/**\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('./add-all').Source} Source\n */\n"},"lineCount":80}},"error":null,"hash":"4fbb5284a7f4c39543b0f74070955280","cacheData":{"env":{}}}