{"id":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"./to-mfs-path","loc":{"line":3,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-sources.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js"},{"name":"merge-options","loc":{"line":4,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-sources.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"}],"generated":{"js":"'use strict'\n\nconst toMfsPath = require('./to-mfs-path')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\nasync function toSources (context, args, defaultOptions) {\n  const sources = []\n  let options\n\n  // takes string arguments and a final optional non-string argument\n  for (let i = 0; i < args.length; i++) {\n    if (typeof args[i] === 'string' || args[i] instanceof String) {\n      sources.push(args[i].trim())\n    } else if (i === args.length - 1) {\n      options = args[i]\n    }\n  }\n\n  options = mergeOptions(defaultOptions, options)\n\n  return {\n    sources: await toMfsPath(context, sources, options),\n    options\n  }\n}\n\nmodule.exports = toSources\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/utils/to-sources.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/files/utils/to-sources.js":"'use strict'\n\nconst toMfsPath = require('./to-mfs-path')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\nasync function toSources (context, args, defaultOptions) {\n  const sources = []\n  let options\n\n  // takes string arguments and a final optional non-string argument\n  for (let i = 0; i < args.length; i++) {\n    if (typeof args[i] === 'string' || args[i] instanceof String) {\n      sources.push(args[i].trim())\n    } else if (i === args.length - 1) {\n      options = args[i]\n    }\n  }\n\n  options = mergeOptions(defaultOptions, options)\n\n  return {\n    sources: await toMfsPath(context, sources, options),\n    options\n  }\n}\n\nmodule.exports = toSources\n"},"lineCount":28}},"error":null,"hash":"b2e70f5ff72b7e56ef75fe0ce4880442","cacheData":{"env":{}}}