{"id":"../node_modules/ipfs-core/src/ipns/routing/config.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"datastore-core","loc":{"line":3,"column":36},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/config.js","resolved":"/Users/michaljach/Sites/golf/node_modules/datastore-core/src/index.js"},{"name":"dlv","loc":{"line":4,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/config.js","resolved":"/Users/michaljach/Sites/golf/node_modules/dlv/dist/dlv.umd.js"},{"name":"./pubsub-datastore","loc":{"line":6,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/config.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/pubsub-datastore.js"},{"name":"./offline-datastore","loc":{"line":7,"column":33},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/config.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/ipns/routing/offline-datastore.js"}],"generated":{"js":"'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = ({ libp2p, repo, peerId, options }) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub\n    const localDatastore = repo.datastore\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(libp2p._dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/ipns/routing/config.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"../node_modules/ipfs-core/src/ipns/routing/config.js":"'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = ({ libp2p, repo, peerId, options }) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub\n    const localDatastore = repo.datastore\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(libp2p._dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"},"lineCount":34}},"error":null,"hash":"7adb1618779c058aef9aec0c5becb695","cacheData":{"env":{}}}