{"id":"../node_modules/ipfs-core/src/components/add.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"it-last","loc":{"line":3,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/add.js","resolved":"/Users/michaljach/Sites/golf/node_modules/it-last/index.js"}],"generated":{"js":"'use strict'\n\nconst last = require('it-last')\n\n/**\n * @typedef {Object} Context\n * @property {ReturnType<import('./add-all')>} addAll\n *\n * @param {Context} context\n */\nmodule.exports = ({ addAll }) => {\n  /**\n   * Import a file or data into IPFS.\n   *\n   * @param {import('ipfs-core-types/src/files').ToEntry} entry\n   * @param {import('ipfs-core-types/src/root').AddAllOptions} [options]\n   * @returns {Promise<import('ipfs-core-types/src/files').UnixFSEntry>}\n   */\n  async function add (entry, options) {\n    /** @type {import('ipfs-core-types/src/files').ImportSource} */\n    const source = (entry)\n    const result = await last(addAll(source, options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/add.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/add.js":"'use strict'\n\nconst last = require('it-last')\n\n/**\n * @typedef {Object} Context\n * @property {ReturnType<import('./add-all')>} addAll\n *\n * @param {Context} context\n */\nmodule.exports = ({ addAll }) => {\n  /**\n   * Import a file or data into IPFS.\n   *\n   * @param {import('ipfs-core-types/src/files').ToEntry} entry\n   * @param {import('ipfs-core-types/src/root').AddAllOptions} [options]\n   * @returns {Promise<import('ipfs-core-types/src/files').UnixFSEntry>}\n   */\n  async function add (entry, options) {\n    /** @type {import('ipfs-core-types/src/files').ImportSource} */\n    const source = (entry)\n    const result = await last(addAll(source, options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"},"lineCount":35}},"error":null,"hash":"8cd2cd70f35d260560b21aba1d57cdd4","cacheData":{"env":{}}}