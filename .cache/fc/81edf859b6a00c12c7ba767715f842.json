{"id":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"mafmt","loc":{"line":3,"column":28},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/bootstrap/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/mafmt/src/index.js"}],"generated":{"js":"'use strict'\n\nconst isMultiaddr = require('mafmt').IPFS.matches\n\n/**\n * @param {any} ma\n * @returns {boolean}\n */\nexports.isValidMultiaddr = ma => {\n  try {\n    return isMultiaddr(ma)\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @typedef {Object} Peers\n * An object that contains an array with all the added addresses\n * @property {Array<Multiaddr>} Peers\n *\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/bootstrap/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/bootstrap/utils.js":"'use strict'\n\nconst isMultiaddr = require('mafmt').IPFS.matches\n\n/**\n * @param {any} ma\n * @returns {boolean}\n */\nexports.isValidMultiaddr = ma => {\n  try {\n    return isMultiaddr(ma)\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @typedef {Object} Peers\n * An object that contains an array with all the added addresses\n * @property {Array<Multiaddr>} Peers\n *\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n"},"lineCount":24}},"error":null,"hash":"913ecbfc78ff05c03e1a5c5737a4cae4","cacheData":{"env":{}}}