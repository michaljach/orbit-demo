{"id":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/orbit-db-pubsub/package.json","includedInParent":true,"mtime":1612441898621},{"name":"p-series","loc":{"line":3,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","resolved":"/Users/michaljach/Sites/golf/node_modules/p-series/index.js"},{"name":"ipfs-pubsub-peer-monitor","loc":{"line":4,"column":28},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-pubsub-peer-monitor/src/ipfs-pubsub-peer-monitor.js"},{"name":"logplease","loc":{"line":6,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","resolved":"/Users/michaljach/Sites/golf/node_modules/logplease/src/index.js"},{"name":"buffer","parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\n\nconst pSeries = require('p-series')\nconst PeerMonitor = require('ipfs-pubsub-peer-monitor')\n\nconst Logger = require('logplease')\nconst logger = Logger.create(\"pubsub\", { color: Logger.Colors.Yellow })\nLogger.setLogLevel('ERROR')\n\nconst maxTopicsOpen = 256\nlet topicsOpenCount = 0\n\nclass IPFSPubsub {\n  constructor(ipfs, id) {\n    this._ipfs = ipfs\n    this._id = id\n    this._subscriptions = {}\n\n    if (this._ipfs.pubsub === null)\n      logger.error(\"The provided version of ipfs doesn't have pubsub support. Messages will not be exchanged.\")\n\n    this._handleMessage = this._handleMessage.bind(this)\n\n    // Bump up the number of listeners we can have open,\n    // ie. number of databases replicating\n    if (this._ipfs.setMaxListeners)\n      this._ipfs.setMaxListeners(maxTopicsOpen)\n  }\n\n  async subscribe(topic, onMessageCallback, onNewPeerCallback, options = {}) {\n    if(!this._subscriptions[topic] && this._ipfs.pubsub) {\n      await this._ipfs.pubsub.subscribe(topic, this._handleMessage, options)\n\n      const topicMonitor = new PeerMonitor(this._ipfs.pubsub, topic)\n\n      topicMonitor.on('join', (peer) => {\n        logger.debug(`Peer joined ${topic}:`)\n        logger.debug(peer)\n        if (this._subscriptions[topic]) {\n          onNewPeerCallback(topic, peer)\n        } else {\n          logger.warn('Peer joined a room we don\\'t have a subscription for')\n          logger.warn(topic, peer)\n        }\n      })\n\n      topicMonitor.on('leave', (peer) => logger.debug(`Peer ${peer} left ${topic}`))\n      topicMonitor.on('error', (e) => logger.error(e))\n\n      this._subscriptions[topic] = {\n        topicMonitor: topicMonitor,\n        onMessage: onMessageCallback,\n        onNewPeer: onNewPeerCallback\n      }\n\n      topicsOpenCount ++\n      logger.debug(\"Topics open:\", topicsOpenCount)\n    }\n  }\n\n  async unsubscribe(hash) {\n    if(this._subscriptions[hash]) {\n      await this._ipfs.pubsub.unsubscribe(hash, this._handleMessage)\n      this._subscriptions[hash].topicMonitor.stop()\n      delete this._subscriptions[hash]\n      logger.debug(`Unsubscribed from '${hash}'`)\n      topicsOpenCount --\n      logger.debug(\"Topics open:\", topicsOpenCount)\n    }\n  }\n\n  publish(topic, message, options = {}) {\n    if (this._subscriptions[topic] && this._ipfs.pubsub) {\n      let payload;\n      //Buffer should be already serialized. Everything else will get serialized as json if not buffer, string.\n      if(Buffer.isBuffer(message) | typeof message === \"string\") {\n        payload = message;\n      } else {\n        payload = JSON.stringify(message);\n      }\n      this._ipfs.pubsub.publish(topic, Buffer.from(payload), options)\n    }\n  }\n\n  async disconnect() {\n    const topics = Object.keys(this._subscriptions)\n    await pSeries(topics.map((t) => this.unsubscribe.bind(this, t)))\n    this._subscriptions = {}\n  }\n\n  async _handleMessage(message) {\n    // Don't process our own messages\n    if (message.from === this._id)\n      return\n\n    // Get the message content and a subscription\n    let content, subscription, topicId\n\n    // Get the topic\n    topicId = message.topicIDs[0]\n    try {\n      content = JSON.parse(Buffer.from(message.data).toString())\n    } catch {\n      content = message.data; //Leave content alone. Meant for higher level code using custom serialization.\n    }\n    subscription = this._subscriptions[topicId]\n\n    if(subscription && subscription.onMessage && content) {\n      await subscription.onMessage(topicId, content, message.from)\n    }\n  }\n}\n\nmodule.exports = IPFSPubsub\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}}],"sources":{"../node_modules/orbit-db-pubsub/src/ipfs-pubsub.js":"'use strict'\n\nconst pSeries = require('p-series')\nconst PeerMonitor = require('ipfs-pubsub-peer-monitor')\n\nconst Logger = require('logplease')\nconst logger = Logger.create(\"pubsub\", { color: Logger.Colors.Yellow })\nLogger.setLogLevel('ERROR')\n\nconst maxTopicsOpen = 256\nlet topicsOpenCount = 0\n\nclass IPFSPubsub {\n  constructor(ipfs, id) {\n    this._ipfs = ipfs\n    this._id = id\n    this._subscriptions = {}\n\n    if (this._ipfs.pubsub === null)\n      logger.error(\"The provided version of ipfs doesn't have pubsub support. Messages will not be exchanged.\")\n\n    this._handleMessage = this._handleMessage.bind(this)\n\n    // Bump up the number of listeners we can have open,\n    // ie. number of databases replicating\n    if (this._ipfs.setMaxListeners)\n      this._ipfs.setMaxListeners(maxTopicsOpen)\n  }\n\n  async subscribe(topic, onMessageCallback, onNewPeerCallback, options = {}) {\n    if(!this._subscriptions[topic] && this._ipfs.pubsub) {\n      await this._ipfs.pubsub.subscribe(topic, this._handleMessage, options)\n\n      const topicMonitor = new PeerMonitor(this._ipfs.pubsub, topic)\n\n      topicMonitor.on('join', (peer) => {\n        logger.debug(`Peer joined ${topic}:`)\n        logger.debug(peer)\n        if (this._subscriptions[topic]) {\n          onNewPeerCallback(topic, peer)\n        } else {\n          logger.warn('Peer joined a room we don\\'t have a subscription for')\n          logger.warn(topic, peer)\n        }\n      })\n\n      topicMonitor.on('leave', (peer) => logger.debug(`Peer ${peer} left ${topic}`))\n      topicMonitor.on('error', (e) => logger.error(e))\n\n      this._subscriptions[topic] = {\n        topicMonitor: topicMonitor,\n        onMessage: onMessageCallback,\n        onNewPeer: onNewPeerCallback\n      }\n\n      topicsOpenCount ++\n      logger.debug(\"Topics open:\", topicsOpenCount)\n    }\n  }\n\n  async unsubscribe(hash) {\n    if(this._subscriptions[hash]) {\n      await this._ipfs.pubsub.unsubscribe(hash, this._handleMessage)\n      this._subscriptions[hash].topicMonitor.stop()\n      delete this._subscriptions[hash]\n      logger.debug(`Unsubscribed from '${hash}'`)\n      topicsOpenCount --\n      logger.debug(\"Topics open:\", topicsOpenCount)\n    }\n  }\n\n  publish(topic, message, options = {}) {\n    if (this._subscriptions[topic] && this._ipfs.pubsub) {\n      let payload;\n      //Buffer should be already serialized. Everything else will get serialized as json if not buffer, string.\n      if(Buffer.isBuffer(message) | typeof message === \"string\") {\n        payload = message;\n      } else {\n        payload = JSON.stringify(message);\n      }\n      this._ipfs.pubsub.publish(topic, Buffer.from(payload), options)\n    }\n  }\n\n  async disconnect() {\n    const topics = Object.keys(this._subscriptions)\n    await pSeries(topics.map((t) => this.unsubscribe.bind(this, t)))\n    this._subscriptions = {}\n  }\n\n  async _handleMessage(message) {\n    // Don't process our own messages\n    if (message.from === this._id)\n      return\n\n    // Get the message content and a subscription\n    let content, subscription, topicId\n\n    // Get the topic\n    topicId = message.topicIDs[0]\n    try {\n      content = JSON.parse(Buffer.from(message.data).toString())\n    } catch {\n      content = message.data; //Leave content alone. Meant for higher level code using custom serialization.\n    }\n    subscription = this._subscriptions[topicId]\n\n    if(subscription && subscription.onMessage && content) {\n      await subscription.onMessage(topicId, content, message.from)\n    }\n  }\n}\n\nmodule.exports = IPFSPubsub\n"},"lineCount":116}},"error":null,"hash":"8f20bec94f488dacfc643fb6cbc26407","cacheData":{"env":{}}}