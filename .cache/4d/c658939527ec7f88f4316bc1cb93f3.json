{"id":"../node_modules/ipfs-core/src/runtime/preload-browser.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"p-queue","loc":{"line":4,"column":36},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/preload-browser.js","resolved":"/Users/michaljach/Sites/golf/node_modules/p-queue/dist/index.js"},{"name":"ipfs-utils/src/http","loc":{"line":5,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/preload-browser.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-utils/src/http.js"},{"name":"debug","loc":{"line":6,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/runtime/preload-browser.js","resolved":"/Users/michaljach/Sites/golf/node_modules/debug/src/browser.js"}],"generated":{"js":"/* eslint-env browser */\n'use strict'\n\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\nconst debug = require('debug')\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n})\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nmodule.exports = function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-ignore\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/runtime/preload-browser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../node_modules/ipfs-core/src/runtime/preload-browser.js":"/* eslint-env browser */\n'use strict'\n\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\nconst debug = require('debug')\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n})\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\nmodule.exports = function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-ignore\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"},"lineCount":36}},"error":null,"hash":"e61073e7b7da295b6e0fd60713f3f0aa","cacheData":{"env":{}}}