{"id":"../node_modules/ipfs-core/src/components/files/flush.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"./stat","loc":{"line":3,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/flush.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/stat.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":4,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/flush.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"},{"name":"merge-options","loc":{"line":5,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/flush.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"}],"generated":{"js":"'use strict'\n\nconst stat = require('./stat')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\nconst defaultOptions = {\n  timeout: undefined,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  /**\n   * Flush a given path's data to disk\n   *\n   * @param {string} path\n   * @param {AbortOptions} [options]\n   * @returns {Promise<CID>} The CID of the path that has been flushed\n   */\n  async function mfsFlush (path, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await stat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/flush.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/files/flush.js":"'use strict'\n\nconst stat = require('./stat')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\nconst defaultOptions = {\n  timeout: undefined,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  /**\n   * Flush a given path's data to disk\n   *\n   * @param {string} path\n   * @param {AbortOptions} [options]\n   * @returns {Promise<CID>} The CID of the path that has been flushed\n   */\n  async function mfsFlush (path, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await stat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"lineCount":35}},"error":null,"hash":"38a437cfe3bd2b6a17cd7828845d45c0","cacheData":{"env":{}}}