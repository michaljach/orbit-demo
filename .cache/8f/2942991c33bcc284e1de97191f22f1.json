{"id":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-bitswap/package.json","includedInParent":true,"mtime":1612441378236}],"generated":{"js":"'use strict'\n\nconst TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic\n   *\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo (task, tasksWithTopic) {\n    let haveBlock = false\n    let isWantBlock = false\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true\n      }\n    }\n\n    // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true\n    }\n\n    // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n    if (!haveBlock && task.data.haveBlock) {\n      return true\n    }\n\n    return false\n  },\n\n  /**\n   * Merge the information from the task into the existing pending task\n   *\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge (newTask, existingTask) {\n    // Tasks look like this:\n    // {\n    //   topic: \"some topic\",\n    //   priority: 5,\n    //\n    //   # The size of the response on the wire. This is used to calculate\n    //   # how many tasks to pop off the request queue and add to a message.\n    //   # If the response is\n    //   # - a HAVE or DONT_HAVE\n    //   #   it is the size of the CID + type (HAVE/DONT_HAVE)\n    //   # - a block\n    //   #   it is the size of the block\n    //   size: 32,\n    //\n    //   data: {\n    //\n    //     # The size of the block, if known (if we don't have the block this is zero)\n    //     blockSize: 128 * 1024,\n    //\n    //     # Indicates if the request is for a block or for a HAVE\n    //     isWantBlock: false,\n    //\n    //     # Do we have the block?\n    //     # Note: a block can have size zero.\n    //     haveBlock: true,\n    //\n    //     # Indicates whether to send a DONT_HAVE response if we don't have\n    //     # the block.\n    //     # If this is false and we don't have the block, we just ignore the\n    //     # want-block request (useful for discovery where we query lots of\n    //     # peers but don't want a response unless the peer has the block).\n    //     sendDontHave: false\n    //   }\n    // }\n    //\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    //\n\n    const taskData = newTask.data\n    const existingData = existingTask.data\n\n    // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock\n      existingData.blockSize = taskData.blockSize\n    }\n\n    // If replacing a want-have with a want-block\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true\n      // If the want-have was a DONT_HAVE, or the want-block has a size\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock\n        existingTask.size = newTask.size\n      }\n    }\n\n    // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize\n    }\n  }\n}\n\nmodule.exports = TaskMerger\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}}],"sources":{"../node_modules/ipfs-bitswap/src/decision-engine/task-merger.js":"'use strict'\n\nconst TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic\n   *\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo (task, tasksWithTopic) {\n    let haveBlock = false\n    let isWantBlock = false\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true\n      }\n    }\n\n    // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true\n    }\n\n    // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n    if (!haveBlock && task.data.haveBlock) {\n      return true\n    }\n\n    return false\n  },\n\n  /**\n   * Merge the information from the task into the existing pending task\n   *\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge (newTask, existingTask) {\n    // Tasks look like this:\n    // {\n    //   topic: \"some topic\",\n    //   priority: 5,\n    //\n    //   # The size of the response on the wire. This is used to calculate\n    //   # how many tasks to pop off the request queue and add to a message.\n    //   # If the response is\n    //   # - a HAVE or DONT_HAVE\n    //   #   it is the size of the CID + type (HAVE/DONT_HAVE)\n    //   # - a block\n    //   #   it is the size of the block\n    //   size: 32,\n    //\n    //   data: {\n    //\n    //     # The size of the block, if known (if we don't have the block this is zero)\n    //     blockSize: 128 * 1024,\n    //\n    //     # Indicates if the request is for a block or for a HAVE\n    //     isWantBlock: false,\n    //\n    //     # Do we have the block?\n    //     # Note: a block can have size zero.\n    //     haveBlock: true,\n    //\n    //     # Indicates whether to send a DONT_HAVE response if we don't have\n    //     # the block.\n    //     # If this is false and we don't have the block, we just ignore the\n    //     # want-block request (useful for discovery where we query lots of\n    //     # peers but don't want a response unless the peer has the block).\n    //     sendDontHave: false\n    //   }\n    // }\n    //\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    //\n\n    const taskData = newTask.data\n    const existingData = existingTask.data\n\n    // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock\n      existingData.blockSize = taskData.blockSize\n    }\n\n    // If replacing a want-have with a want-block\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true\n      // If the want-have was a DONT_HAVE, or the want-block has a size\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock\n        existingTask.size = newTask.size\n      }\n    }\n\n    // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize\n    }\n  }\n}\n\nmodule.exports = TaskMerger\n"},"lineCount":134}},"error":null,"hash":"56a29da5a0c19e6f7e9ce2933c835747","cacheData":{"env":{}}}