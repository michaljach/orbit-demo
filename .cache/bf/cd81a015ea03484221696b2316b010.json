{"id":"../node_modules/it-merge/index.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/it-merge/package.json","includedInParent":true,"mtime":1612441379162},{"name":"it-pushable","loc":{"line":3,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/it-merge/index.js","resolved":"/Users/michaljach/Sites/golf/node_modules/it-pushable/index.js"}],"generated":{"js":"'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  // @ts-ignore\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/it-merge/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/it-merge/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"../node_modules/it-merge/index.js":"'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  // @ts-ignore\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n"},"lineCount":39}},"error":null,"hash":"2647bbae625ffa37b2d2c80bc1a56894","cacheData":{"env":{}}}