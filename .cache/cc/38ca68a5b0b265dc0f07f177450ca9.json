{"id":"../node_modules/ipfs-core/src/components/block/put.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipld-block","loc":{"line":3,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/put.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipld-block/src/index.js"},{"name":"multihashing-async","loc":{"line":4,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/put.js","resolved":"/Users/michaljach/Sites/golf/node_modules/multihashing-async/src/index.js"},{"name":"cids","loc":{"line":5,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/put.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"},{"name":"is-ipfs","loc":{"line":6,"column":23},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/put.js","resolved":"/Users/michaljach/Sites/golf/node_modules/is-ipfs/src/index.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":7,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/put.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst Block = require('ipld-block')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isIPFS = require('is-ipfs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Pin} config.pin\n * @param {import('.').GCLock} config.gcLock\n * @param {import('.').Preload} config.preload\n */\nmodule.exports = ({ blockService, pin, gcLock, preload }) => {\n  /**\n   * Stores input as an IPFS block.\n   *\n   * **Note:** If you pass a `Block` instance as the block parameter, you\n   * don't need to pass options, as the block instance will carry the CID\n   * value as a property.\n   *\n   * @example\n   * ```js\n   * // Defaults\n   * const encoder = new TextEncoder()\n   * const decoder = new TextDecoder()\n   *\n   * const bytes = encoder.encode('a serialized object')\n   * const block = await ipfs.block.put(bytes)\n   *\n   * console.log(decoder.decode(block.data))\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   *\n   * // With custom format and hashtype through CID\n   * const CID = require('cids')\n   * const another = encoder.encode('another serialized object')\n   * const cid = new CID(1, 'dag-pb', multihash)\n   * const block = await ipfs.block.put(another, cid)\n   * console.log(decoder.decode(block.data))\n   *\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   * ```\n   *\n   * @param {IPLDBlock|Uint8Array} block - The block or data to store\n   * @param {PutOptions & AbortOptions} [options] - **Note:** If you pass a `Block` instance as the block parameter, you don't need to pass options, as the block instance will carry the CID value as a property.\n   * @returns {Promise<IPLDBlock>} - A Block type object, containing both the data and the hash of the block\n   */\n  async function put (block, options = {}) {\n    if (Array.isArray(block)) {\n      throw new Error('Array is not supported')\n    }\n\n    if (!Block.isBlock(block)) {\n      /** @type {Uint8Array} */\n      const bytes = (block)\n      if (options.cid && isIPFS.cid(options.cid)) {\n        const cid = CID.isCID(options.cid) ? options.cid : new CID(options.cid)\n        block = new Block(bytes, cid)\n      } else {\n        const mhtype = options.mhtype || 'sha2-256'\n        const format = options.format || 'dag-pb'\n\n        /** @type {CIDVersion} */\n        let cidVersion = 1\n\n        if (options.version == null) {\n          // Pick appropriate CID version\n          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1\n        } else {\n          // @ts-ignore - options.version is a {number} but the CID constructor arg version is a {0|1}\n          // TODO: https://github.com/multiformats/js-cid/pull/129\n          cidVersion = options.version\n        }\n\n        const multihash = await multihashing(block, mhtype)\n        const cid = new CID(cidVersion, format, multihash)\n\n        block = new Block(bytes, cid)\n      }\n    }\n\n    const release = await gcLock.readLock()\n\n    try {\n      await blockService.put(block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(block.cid)\n      }\n\n      if (options.pin === true) {\n        await pin.add(block.cid, {\n          recursive: true,\n          signal: options.signal\n        })\n      }\n\n      return block\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n\n/**\n * @typedef {Object} PutOptions\n * @property {CID} [cid] - A CID to store the block under (default: `undefined`)\n * @property {string} [format='dag-pb'] - The codec to use to create the CID (default: `'dag-pb'`)\n * @property {string} [mhtype='sha2-256'] - The hashing algorithm to use to create the CID (default: `'sha2-256'`)\n * @property {number} [mhlen]\n * @property {CIDVersion} [version=0] - The version to use to create the CID (default: `0`)\n * @property {boolean} [pin=false] - If true, pin added blocks recursively (default: `false`)\n * @property {boolean} [preload]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').IPLDBlock} IPLDBlock\n * @typedef {0|1} CIDVersion\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/put.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/block/put.js":"'use strict'\n\nconst Block = require('ipld-block')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isIPFS = require('is-ipfs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Pin} config.pin\n * @param {import('.').GCLock} config.gcLock\n * @param {import('.').Preload} config.preload\n */\nmodule.exports = ({ blockService, pin, gcLock, preload }) => {\n  /**\n   * Stores input as an IPFS block.\n   *\n   * **Note:** If you pass a `Block` instance as the block parameter, you\n   * don't need to pass options, as the block instance will carry the CID\n   * value as a property.\n   *\n   * @example\n   * ```js\n   * // Defaults\n   * const encoder = new TextEncoder()\n   * const decoder = new TextDecoder()\n   *\n   * const bytes = encoder.encode('a serialized object')\n   * const block = await ipfs.block.put(bytes)\n   *\n   * console.log(decoder.decode(block.data))\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   *\n   * // With custom format and hashtype through CID\n   * const CID = require('cids')\n   * const another = encoder.encode('another serialized object')\n   * const cid = new CID(1, 'dag-pb', multihash)\n   * const block = await ipfs.block.put(another, cid)\n   * console.log(decoder.decode(block.data))\n   *\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   * ```\n   *\n   * @param {IPLDBlock|Uint8Array} block - The block or data to store\n   * @param {PutOptions & AbortOptions} [options] - **Note:** If you pass a `Block` instance as the block parameter, you don't need to pass options, as the block instance will carry the CID value as a property.\n   * @returns {Promise<IPLDBlock>} - A Block type object, containing both the data and the hash of the block\n   */\n  async function put (block, options = {}) {\n    if (Array.isArray(block)) {\n      throw new Error('Array is not supported')\n    }\n\n    if (!Block.isBlock(block)) {\n      /** @type {Uint8Array} */\n      const bytes = (block)\n      if (options.cid && isIPFS.cid(options.cid)) {\n        const cid = CID.isCID(options.cid) ? options.cid : new CID(options.cid)\n        block = new Block(bytes, cid)\n      } else {\n        const mhtype = options.mhtype || 'sha2-256'\n        const format = options.format || 'dag-pb'\n\n        /** @type {CIDVersion} */\n        let cidVersion = 1\n\n        if (options.version == null) {\n          // Pick appropriate CID version\n          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1\n        } else {\n          // @ts-ignore - options.version is a {number} but the CID constructor arg version is a {0|1}\n          // TODO: https://github.com/multiformats/js-cid/pull/129\n          cidVersion = options.version\n        }\n\n        const multihash = await multihashing(block, mhtype)\n        const cid = new CID(cidVersion, format, multihash)\n\n        block = new Block(bytes, cid)\n      }\n    }\n\n    const release = await gcLock.readLock()\n\n    try {\n      await blockService.put(block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(block.cid)\n      }\n\n      if (options.pin === true) {\n        await pin.add(block.cid, {\n          recursive: true,\n          signal: options.signal\n        })\n      }\n\n      return block\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n\n/**\n * @typedef {Object} PutOptions\n * @property {CID} [cid] - A CID to store the block under (default: `undefined`)\n * @property {string} [format='dag-pb'] - The codec to use to create the CID (default: `'dag-pb'`)\n * @property {string} [mhtype='sha2-256'] - The hashing algorithm to use to create the CID (default: `'sha2-256'`)\n * @property {number} [mhlen]\n * @property {CIDVersion} [version=0] - The version to use to create the CID (default: `0`)\n * @property {boolean} [pin=false] - If true, pin added blocks recursively (default: `false`)\n * @property {boolean} [preload]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').IPLDBlock} IPLDBlock\n * @typedef {0|1} CIDVersion\n */\n"},"lineCount":133}},"error":null,"hash":"a94a74ade231e5986ed7038fc1b332a4","cacheData":{"env":{}}}