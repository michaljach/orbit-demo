{"id":"../node_modules/ipfs-core-utils/src/cid.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/package.json","includedInParent":true,"mtime":1612441378392},{"name":"cids","loc":{"line":3,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/cid.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"}],"generated":{"js":"'use strict'\n\nconst CID = require('cids')\n\n/**\n * Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n *\n * Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n * which is necessary if the multibase is something other than base58btc. Note\n * that it will also not apply the encoding (since v0 CIDs can only be encoded\n * as base58btc).\n *\n * @param {CID|Uint8Array|string} input - The CID to encode\n * @param {Object} [options] - Optional options\n * @param {import('cids').BaseNameOrCode} [options.base] - Name of multibase codec to encode the CID with\n * @param {boolean} [options.upgrade] - Automatically upgrade v0 CIDs to v1 when\n * necessary. Default: true.\n * @returns {string} - CID in string representation\n */\nexports.cidToString = (input, options = {}) => {\n  const upgrade = options.upgrade !== false\n  let cid = CID.isCID(input)\n    ? input\n    // @ts-ignore - TS seems to get confused by the type defs in CID repo.\n    : new CID(input)\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!upgrade) return cid.toString()\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString(options.base)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/cid.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}}],"sources":{"../node_modules/ipfs-core-utils/src/cid.js":"'use strict'\n\nconst CID = require('cids')\n\n/**\n * Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n *\n * Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n * which is necessary if the multibase is something other than base58btc. Note\n * that it will also not apply the encoding (since v0 CIDs can only be encoded\n * as base58btc).\n *\n * @param {CID|Uint8Array|string} input - The CID to encode\n * @param {Object} [options] - Optional options\n * @param {import('cids').BaseNameOrCode} [options.base] - Name of multibase codec to encode the CID with\n * @param {boolean} [options.upgrade] - Automatically upgrade v0 CIDs to v1 when\n * necessary. Default: true.\n * @returns {string} - CID in string representation\n */\nexports.cidToString = (input, options = {}) => {\n  const upgrade = options.upgrade !== false\n  let cid = CID.isCID(input)\n    ? input\n    // @ts-ignore - TS seems to get confused by the type defs in CID repo.\n    : new CID(input)\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!upgrade) return cid.toString()\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString(options.base)\n}\n"},"lineCount":34}},"error":null,"hash":"08becb9666f12fbe5c4ce0149250b164","cacheData":{"env":{}}}