{"id":"../node_modules/ipfs-core/src/components/block/utils.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"cids","loc":{"line":3,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/cids/src/index.js"},{"name":"err-code","loc":{"line":4,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/block/utils.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"}],"generated":{"js":"'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\n\n/**\n * @param {string|Uint8Array|CID} cid\n * @returns {CID}\n */\nexports.cleanCid = cid => {\n  if (CID.isCID(cid)) {\n    return cid\n  }\n\n  // CID constructor knows how to do the cleaning :)\n  try {\n    // @ts-ignore - string|Uint8Array union seems to confuse CID typedefs.\n    return new CID(cid)\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/block/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/block/utils.js":"'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\n\n/**\n * @param {string|Uint8Array|CID} cid\n * @returns {CID}\n */\nexports.cleanCid = cid => {\n  if (CID.isCID(cid)) {\n    return cid\n  }\n\n  // CID constructor knows how to do the cleaning :)\n  try {\n    // @ts-ignore - string|Uint8Array union seems to confuse CID typedefs.\n    return new CID(cid)\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n}\n"},"lineCount":23}},"error":null,"hash":"a4c0d870be79bafcaad02eb7e8bab57a","cacheData":{"env":{}}}