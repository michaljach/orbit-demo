{"id":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612441996706},{"name":"/Users/michaljach/Sites/golf/node_modules/orbit-db-access-controllers/package.json","includedInParent":true,"mtime":1612441959053},{"name":"orbit-db-io","loc":{"line":2,"column":19},"parent":"/Users/michaljach/Sites/golf/node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","resolved":"/Users/michaljach/Sites/golf/node_modules/orbit-db-access-controllers/node_modules/orbit-db-io/index.js"}],"generated":{"js":"'use strict'\nconst io = require('orbit-db-io')\n\nclass AccessControllerManifest {\n  constructor (type, params = {}) {\n    this.type = type\n    this.params = params\n  }\n\n  static async resolve (ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required')\n      }\n      return new AccessControllerManifest(options.type, { address: manifestHash })\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) { manifestHash = manifestHash.split('/')[2] }\n      const { type, params } = await io.read(ipfs, manifestHash)\n      return new AccessControllerManifest(type, params)\n    }\n  }\n\n  static async create (ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address\n    }\n    const manifest = {\n      type: type,\n      params: params\n    }\n    return io.write(ipfs, 'dag-cbor', manifest)\n  }\n}\n\nmodule.exports = AccessControllerManifest\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}}],"sources":{"../node_modules/orbit-db-access-controllers/src/access-controller-manifest.js":"'use strict'\nconst io = require('orbit-db-io')\n\nclass AccessControllerManifest {\n  constructor (type, params = {}) {\n    this.type = type\n    this.params = params\n  }\n\n  static async resolve (ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required')\n      }\n      return new AccessControllerManifest(options.type, { address: manifestHash })\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) { manifestHash = manifestHash.split('/')[2] }\n      const { type, params } = await io.read(ipfs, manifestHash)\n      return new AccessControllerManifest(type, params)\n    }\n  }\n\n  static async create (ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address\n    }\n    const manifest = {\n      type: type,\n      params: params\n    }\n    return io.write(ipfs, 'dag-cbor', manifest)\n  }\n}\n\nmodule.exports = AccessControllerManifest\n"},"lineCount":37}},"error":null,"hash":"203a264fe68cc471dc2e29bf5f59316a","cacheData":{"env":{}}}