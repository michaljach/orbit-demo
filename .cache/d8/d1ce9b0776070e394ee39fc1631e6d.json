{"id":"../node_modules/is-domain-name/index.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/is-domain-name/package.json","includedInParent":true,"mtime":1612441379232}],"generated":{"js":"'use strict'\n\n// Adapted from RFC 2181 (See section 11)\n//\n// The RFC defines a Domain Name to be at most 255 chars including seperators\n// between labels.\n// Subdomains are labels plus a seperator. A label is a string starting and\n// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.\n//\n// We make some assumptions below that go beyond the RFC. We assume the TLD\n// to be at least 2 chars. The regex also allows domains longer than 255 chars,\n// but allows at most 127 subdomains, as assuming a lower-bound of one char per\n// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.\n/*\n(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)\n  [a-z0-9]\n  (?:\n    [a-z0-9\\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)\n    [a-z0-9]\n  )?\n  \\.                  // Label seperator\n){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars\n(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)\n  [a-z0-9]\n  [a-z0-9\\-]{0,61}\n  [a-z0-9]\n)\n\\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree\n */\nvar domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.){0,126}(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9]))\\.?$/i\n\n/**\n * Test whether a string is a valid domain name, optionally checking for a root dot as well\n * @param  {String}  domainName\n * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false\n * @return {Boolean}\n */\nmodule.exports = function isDomainName (domainName, rootDot) {\n  if (rootDot == null) rootDot = false\n\n  if (domainName.length < 2) return false\n  if (domainName.length > 255) return false\n\n  var lastChar = domainName[domainName.length - 1]\n  if (rootDot) {\n    if (lastChar !== '.') return false\n  } else {\n    if (lastChar === '.') return false\n  }\n\n  return domainNameRegex.test(domainName)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/is-domain-name/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/is-domain-name/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}}],"sources":{"../node_modules/is-domain-name/index.js":"'use strict'\n\n// Adapted from RFC 2181 (See section 11)\n//\n// The RFC defines a Domain Name to be at most 255 chars including seperators\n// between labels.\n// Subdomains are labels plus a seperator. A label is a string starting and\n// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.\n//\n// We make some assumptions below that go beyond the RFC. We assume the TLD\n// to be at least 2 chars. The regex also allows domains longer than 255 chars,\n// but allows at most 127 subdomains, as assuming a lower-bound of one char per\n// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.\n/*\n(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)\n  [a-z0-9]\n  (?:\n    [a-z0-9\\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)\n    [a-z0-9]\n  )?\n  \\.                  // Label seperator\n){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars\n(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)\n  [a-z0-9]\n  [a-z0-9\\-]{0,61}\n  [a-z0-9]\n)\n\\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree\n */\nvar domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.){0,126}(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9]))\\.?$/i\n\n/**\n * Test whether a string is a valid domain name, optionally checking for a root dot as well\n * @param  {String}  domainName\n * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false\n * @return {Boolean}\n */\nmodule.exports = function isDomainName (domainName, rootDot) {\n  if (rootDot == null) rootDot = false\n\n  if (domainName.length < 2) return false\n  if (domainName.length > 255) return false\n\n  var lastChar = domainName[domainName.length - 1]\n  if (rootDot) {\n    if (lastChar !== '.') return false\n  } else {\n    if (lastChar === '.') return false\n  }\n\n  return domainNameRegex.test(domainName)\n}\n"},"lineCount":53}},"error":null,"hash":"64f7bcf844fa611bd5c59ddbe92153dd","cacheData":{"env":{}}}