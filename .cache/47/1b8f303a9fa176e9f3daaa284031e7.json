{"id":"../node_modules/ipns/src/pb/ipns.proto.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipns/package.json","includedInParent":true,"mtime":1612441378388},{"name":"protons","loc":{"line":3,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipns/src/pb/ipns.proto.js","resolved":"/Users/michaljach/Sites/golf/node_modules/protons/src/index.js"}],"generated":{"js":"'use strict'\n\nconst protons = require('protons')\n\n/* eslint-disable no-tabs */\nconst message = `\nmessage IpnsEntry {\n  enum ValidityType {\n\t\tEOL = 0; // setting an EOL says \"this record is valid until...\"\n\t}\n\n  required bytes value = 1;\n\trequired bytes signature = 2;\n\n\toptional ValidityType validityType = 3;\n\toptional bytes validity = 4;\n\n\toptional uint64 sequence = 5;\n\n\toptional uint64 ttl = 6;\n\n\t// in order for nodes to properly validate a record upon receipt, they need the public\n\t// key associated with it. For old RSA keys, its easiest if we just send this as part of\n\t// the record itself. For newer ed25519 keys, the public key can be embedded in the\n\t// peerID, making this field unnecessary.\n\toptional bytes pubKey = 7;\n}\n`\n\nmodule.exports = protons(message).IpnsEntry\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipns/src/pb/ipns.proto.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"../node_modules/ipns/src/pb/ipns.proto.js":"'use strict'\n\nconst protons = require('protons')\n\n/* eslint-disable no-tabs */\nconst message = `\nmessage IpnsEntry {\n  enum ValidityType {\n\t\tEOL = 0; // setting an EOL says \"this record is valid until...\"\n\t}\n\n  required bytes value = 1;\n\trequired bytes signature = 2;\n\n\toptional ValidityType validityType = 3;\n\toptional bytes validity = 4;\n\n\toptional uint64 sequence = 5;\n\n\toptional uint64 ttl = 6;\n\n\t// in order for nodes to properly validate a record upon receipt, they need the public\n\t// key associated with it. For old RSA keys, its easiest if we just send this as part of\n\t// the record itself. For newer ed25519 keys, the public key can be embedded in the\n\t// peerID, making this field unnecessary.\n\toptional bytes pubKey = 7;\n}\n`\n\nmodule.exports = protons(message).IpnsEntry\n"},"lineCount":31}},"error":null,"hash":"e31bfb537a8c224e0d66053c6929ca0a","cacheData":{"env":{}}}