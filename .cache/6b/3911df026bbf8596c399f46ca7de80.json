{"id":"../node_modules/ipfs-core/src/components/files/read.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"ipfs-unixfs-exporter","loc":{"line":3,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/read.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-unixfs-exporter/src/index.js"},{"name":"merge-options","loc":{"line":4,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/read.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"},{"name":"./utils/to-mfs-path","loc":{"line":5,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/read.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js"},{"name":"err-code","loc":{"line":6,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/read.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":7,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/read.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity,\n  signal: undefined\n}\n\n/**\n * @param {any} context\n */\nmodule.exports = (context) => {\n  /**\n   * Read a file\n   *\n   * @param {string | CID} path - An MFS path, IPFS Path or CID to read\n   * @param {ReadOptions & AbortOptions} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   * @example\n   * ```js\n   * const chunks = []\n   *\n   * for await (const chunk of ipfs.files.read('/hello-world')) {\n   *   chunks.push(chunk)\n   * }\n   *\n   * console.log(uint8ArrayConcat(chunks).toString())\n   * // Hello, World!\n   * ```\n   */\n  function mfsRead (path, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.ipld)\n\n        if (result.unixfs.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n\n/**\n * @typedef {Object} ReadOptions\n * @property {number} [offset] - An offset to start reading the file from\n * @property {number} [length] - An optional max length to read from the file\n *\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/read.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/files/read.js":"'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity,\n  signal: undefined\n}\n\n/**\n * @param {any} context\n */\nmodule.exports = (context) => {\n  /**\n   * Read a file\n   *\n   * @param {string | CID} path - An MFS path, IPFS Path or CID to read\n   * @param {ReadOptions & AbortOptions} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   * @example\n   * ```js\n   * const chunks = []\n   *\n   * for await (const chunk of ipfs.files.read('/hello-world')) {\n   *   chunks.push(chunk)\n   * }\n   *\n   * console.log(uint8ArrayConcat(chunks).toString())\n   * // Hello, World!\n   * ```\n   */\n  function mfsRead (path, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.ipld)\n\n        if (result.unixfs.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n\n/**\n * @typedef {Object} ReadOptions\n * @property {number} [offset] - An offset to start reading the file from\n * @property {number} [length] - An optional max length to read from the file\n *\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"lineCount":74}},"error":null,"hash":"e697571cbae7400e6c68afe9d4513185","cacheData":{"env":{}}}