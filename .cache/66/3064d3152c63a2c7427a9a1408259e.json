{"id":"../node_modules/ipfs-core/src/components/files/write.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"debug","loc":{"line":3,"column":20},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/debug/src/browser.js"},{"name":"ipfs-unixfs-importer","loc":{"line":4,"column":25},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-unixfs-importer/src/index.js"},{"name":"./stat","loc":{"line":5,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/stat.js"},{"name":"./mkdir","loc":{"line":6,"column":22},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/mkdir.js"},{"name":"./utils/add-link","loc":{"line":7,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/add-link.js"},{"name":"merge-options","loc":{"line":8,"column":29},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/merge-options/index.js"},{"name":"./utils/create-lock","loc":{"line":9,"column":27},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/create-lock.js"},{"name":"./utils/to-async-iterator","loc":{"line":10,"column":32},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js"},{"name":"./utils/to-mfs-path","loc":{"line":11,"column":26},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js"},{"name":"./utils/to-path-components","loc":{"line":12,"column":33},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-path-components.js"},{"name":"./utils/to-trail","loc":{"line":13,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/to-trail.js"},{"name":"./utils/update-tree","loc":{"line":14,"column":27},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/update-tree.js"},{"name":"./utils/update-mfs-root","loc":{"line":15,"column":30},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js"},{"name":"err-code","loc":{"line":16,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/err-code/index.js"},{"name":"../../utils","loc":{"line":19,"column":12},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils.js"},{"name":"it-last","loc":{"line":20,"column":21},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/it-last/index.js"},{"name":"ipfs-core-utils/src/with-timeout-option","loc":{"line":21,"column":34},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/files/write.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core-utils/src/with-timeout-option.js"}],"generated":{"js":"'use strict'\n\nconst log = require('debug')('ipfs:mfs:write')\nconst importer = require('ipfs-unixfs-importer')\nconst stat = require('./stat')\nconst mkdir = require('./mkdir')\nconst addLink = require('./utils/add-link')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst createLock = require('./utils/create-lock')\nconst toAsyncIterator = require('./utils/to-async-iterator')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toPathComponents = require('./utils/to-path-components')\nconst toTrail = require('./utils/to-trail')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst errCode = require('err-code')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils')\nconst last = require('it-last')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: undefined, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: () => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000,\n  mode: undefined,\n  mtime: undefined,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  /**\n   * Write to an MFS path\n   *\n   * @param {string} path - The MFS path where you will write to\n   * @param {string|Uint8Array|AsyncIterable<Uint8Array>|Blob} content - The content to write to the path\n   * @param {WriteOptions & AbortOptions} [options]\n   * @returns {Promise<void>}\n   */\n  async function mfsWrite (path, content, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    let source, destination, parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-ignore - parent maybe undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-ignore - parent maybe undefined\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n    let parentExists = false\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentNode = await context.ipld.get(parent.cid)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = options.mode\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  let mtime\n\n  if (options.mtime !== undefined && options.mtine !== null) {\n    mtime = options.mtime\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.block, {\n    progress: options.progress,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType,\n    pin: false\n  }))\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  const stream = {\n    [Symbol.asyncIterator]: function * _asyncZeroes () {\n      while (true) {\n        yield buf.slice()\n      }\n    }\n  }\n\n  return limitAsyncStreamBytes(stream, count)\n}\n\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n\n/**\n * @typedef {Object} WriteOptions\n * @property {number} [offset] - An offset to start writing to file at\n * @property {number} [length] - Optionally limit how many bytes are read from the stream\n * @property {boolean} [create=false] - Create the MFS path if it does not exist\n * @property {boolean} [parents=false] - Create intermediate MFS paths if they do not exist\n * @property {boolean} [truncate=false] - Truncate the file at the MFS path if it would have been larger than the passed content\n * @property {boolean} [rawLeaves=false] - If true, DAG leaves will contain raw file data and not be wrapped in a protobuf\n * @property {import('ipfs-core-types/src/files').ToMode} [mode] - An integer that represents the file mode\n * @property {import('ipfs-core-types/src/files').ToMTime} [mtime] - A Date object, an object with `{ secs, nsecs }` properties where secs is the number of seconds since (positive) or before (negative) the Unix Epoch began and nsecs is the number of nanoseconds since the last full second, or the output of `process.hrtime()\n * @property {boolean} [flush] - If true the changes will be immediately flushed to disk\n * @property {string} [hashAlg='sha2-256'] - The hash algorithm to use for any updated entries\n * @property {0|1} [cidVersion=0] - The CID version to use for any updated entries\n *\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ipfs-core/src/components/files/write.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/files/write.js":"'use strict'\n\nconst log = require('debug')('ipfs:mfs:write')\nconst importer = require('ipfs-unixfs-importer')\nconst stat = require('./stat')\nconst mkdir = require('./mkdir')\nconst addLink = require('./utils/add-link')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst createLock = require('./utils/create-lock')\nconst toAsyncIterator = require('./utils/to-async-iterator')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toPathComponents = require('./utils/to-path-components')\nconst toTrail = require('./utils/to-trail')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst errCode = require('err-code')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils')\nconst last = require('it-last')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: undefined, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: () => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000,\n  mode: undefined,\n  mtime: undefined,\n  signal: undefined\n}\n\nmodule.exports = (context) => {\n  /**\n   * Write to an MFS path\n   *\n   * @param {string} path - The MFS path where you will write to\n   * @param {string|Uint8Array|AsyncIterable<Uint8Array>|Blob} content - The content to write to the path\n   * @param {WriteOptions & AbortOptions} [options]\n   * @returns {Promise<void>}\n   */\n  async function mfsWrite (path, content, options = {}) {\n    options = mergeOptions(defaultOptions, options)\n\n    let source, destination, parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-ignore - parent maybe undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-ignore - parent maybe undefined\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n    let parentExists = false\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentNode = await context.ipld.get(parent.cid)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = options.mode\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  let mtime\n\n  if (options.mtime !== undefined && options.mtine !== null) {\n    mtime = options.mtime\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.block, {\n    progress: options.progress,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType,\n    pin: false\n  }))\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  const stream = {\n    [Symbol.asyncIterator]: function * _asyncZeroes () {\n      while (true) {\n        yield buf.slice()\n      }\n    }\n  }\n\n  return limitAsyncStreamBytes(stream, count)\n}\n\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n\n/**\n * @typedef {Object} WriteOptions\n * @property {number} [offset] - An offset to start writing to file at\n * @property {number} [length] - Optionally limit how many bytes are read from the stream\n * @property {boolean} [create=false] - Create the MFS path if it does not exist\n * @property {boolean} [parents=false] - Create intermediate MFS paths if they do not exist\n * @property {boolean} [truncate=false] - Truncate the file at the MFS path if it would have been larger than the passed content\n * @property {boolean} [rawLeaves=false] - If true, DAG leaves will contain raw file data and not be wrapped in a protobuf\n * @property {import('ipfs-core-types/src/files').ToMode} [mode] - An integer that represents the file mode\n * @property {import('ipfs-core-types/src/files').ToMTime} [mtime] - A Date object, an object with `{ secs, nsecs }` properties where secs is the number of seconds since (positive) or before (negative) the Unix Epoch began and nsecs is the number of nanoseconds since the last full second, or the output of `process.hrtime()\n * @property {boolean} [flush] - If true the changes will be immediately flushed to disk\n * @property {string} [hashAlg='sha2-256'] - The hash algorithm to use for any updated entries\n * @property {0|1} [cidVersion=0] - The CID version to use for any updated entries\n *\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */\n"},"lineCount":310}},"error":null,"hash":"850d2055415743a7d835ca10df49f4f9","cacheData":{"env":{}}}