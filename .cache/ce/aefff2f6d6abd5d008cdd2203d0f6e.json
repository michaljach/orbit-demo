{"id":"../node_modules/ipfs-core/src/components/stop.js","dependencies":[{"name":"/Users/michaljach/Sites/golf/package.json","includedInParent":true,"mtime":1612444349509},{"name":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/package.json","includedInParent":true,"mtime":1612441378238},{"name":"../utils/service","loc":{"line":3,"column":24},"parent":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/components/stop.js","resolved":"/Users/michaljach/Sites/golf/node_modules/ipfs-core/src/utils/service.js"}],"generated":{"js":"'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n * @param {import('.').Preload} config.preload\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').IPNS} config.ipns\n * @param {import('.').Repo} config.repo\n * @param {import('.').MFSPreload} config.mfsPreload\n */\nmodule.exports = ({ network, preload, blockService, ipns, repo, mfsPreload }) => {\n  const stop = async () => {\n    blockService.unsetExchange()\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop(),\n      Service.stop(network),\n      repo.close()\n    ])\n  }\n\n  return stop\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core/src/components/stop.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/ipfs-core/src/components/stop.js":"'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n * @param {import('.').Preload} config.preload\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').IPNS} config.ipns\n * @param {import('.').Repo} config.repo\n * @param {import('.').MFSPreload} config.mfsPreload\n */\nmodule.exports = ({ network, preload, blockService, ipns, repo, mfsPreload }) => {\n  const stop = async () => {\n    blockService.unsetExchange()\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop(),\n      Service.stop(network),\n      repo.close()\n    ])\n  }\n\n  return stop\n}\n"},"lineCount":28}},"error":null,"hash":"23e5718d7ec6c2bfb5963e908a92d66f","cacheData":{"env":{}}}